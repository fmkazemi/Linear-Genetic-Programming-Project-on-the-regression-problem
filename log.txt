############################## initial ##############################
Diversity:       1000 / 1000
Average Fitness: 6.96778e+052
Average Size:    7.996

Current Best Program:
// Fitness Information: 92.076
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[4] = cf[0] + cf[0];
	//r[3] = cf[0] * cf[0];
	//r[1] = 0.547546 / cf[0];
	r[2] = r[2] / cf[0];
	r[3] = cf[0] * r[0];
	if(0.499512 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = 0.555176 - r[5];
	//if(r[1] < -0.433533)
}




############################## 1 ##############################
Diversity:       999 / 1000
Average Fitness: 8.61169e+025
Average Size:    7.75

Current Best Program:
// Fitness Information: 92.076
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[4] = cf[0] + cf[0];
	//r[3] = cf[0] * cf[0];
	//r[1] = 0.547546 / cf[0];
	r[2] = r[2] / cf[0];
	r[3] = cf[0] * r[0];
	if(0.499512 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = 0.555176 - r[5];
	//if(r[1] < -0.433533)
}




############################## 2 ##############################
Diversity:       997 / 1000
Average Fitness: 8.78579e+025
Average Size:    7.629

Current Best Program:
// Fitness Information: 92.076
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[4] = cf[0] + cf[0];
	//r[3] = cf[0] * cf[0];
	//r[1] = 0.547546 / cf[0];
	r[2] = r[2] / cf[0];
	r[3] = cf[0] * r[0];
	if(0.499512 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = 0.555176 - r[5];
	//if(r[1] < -0.433533)
}




############################## 3 ##############################
Diversity:       999 / 1000
Average Fitness: 1.39745e+026
Average Size:    7.526

Current Best Program:
// Fitness Information: 92.076
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[4] = cf[0] + cf[0];
	//r[3] = cf[0] * cf[0];
	//r[1] = 0.547546 / cf[0];
	r[2] = r[2] / cf[0];
	r[3] = cf[0] * r[0];
	if(0.499512 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = 0.555176 - r[5];
	//if(r[1] < -0.433533)
}




############################## 4 ##############################
Diversity:       997 / 1000
Average Fitness: 9.79548e+023
Average Size:    7.486

Current Best Program:
// Fitness Information: 92.076
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[4] = cf[0] + cf[0];
	//r[3] = cf[0] * cf[0];
	//r[1] = 0.547546 / cf[0];
	r[2] = r[2] / cf[0];
	r[3] = cf[0] * r[0];
	if(0.499512 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = 0.555176 - r[5];
	//if(r[1] < -0.433533)
}




############################## 5 ##############################
Diversity:       995 / 1000
Average Fitness: 6.05783e+025
Average Size:    7.798

Current Best Program:
// Fitness Information: 92.076
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[4] = cf[0] + cf[0];
	//r[3] = cf[0] * cf[0];
	//r[1] = 0.547546 / cf[0];
	r[2] = r[2] / cf[0];
	r[3] = cf[0] * r[0];
	if(0.499512 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = 0.555176 - r[5];
	//if(r[1] < -0.433533)
}




############################## 6 ##############################
Diversity:       991 / 1000
Average Fitness: 1.74276e+026
Average Size:    7.881

Current Best Program:
// Fitness Information: 92.0403
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = r[4] * cf[0];
	r[5] = cf[0] * r[0];
	if(0.852234 < cf[0])
	r[3] = cf[0] / r[2];
	r[0] = r[3] - -0.000671387;
	r[4] = r[5] + r[4];
	r[3] = r[2] / -0.541687;
	if(0.499512 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = 0.555176 - r[5];
	//if(r[1] < -0.433533)
}




############################## 7 ##############################
Diversity:       989 / 1000
Average Fitness: 6.35191e+025
Average Size:    8.347

Current Best Program:
// Fitness Information: 91.3887
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[4] = cf[0] + cf[0];
	r[3] = cf[0] * cf[0];
	r[0] = -0.144287 + 0.157959;
	r[5] = 0.351379 * r[4];
	if(0.989563 < r[4])
	if(0.499512 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = 0.555176 - r[5];
	//if(r[1] < -0.433533)
}




############################## 8 ##############################
Diversity:       992 / 1000
Average Fitness: 8.35161e+025
Average Size:    8.666

Current Best Program:
// Fitness Information: 88.6039
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[1] = -0.779053 * r[5];
	r[1] = r[5] * -0.990417;
	r[2] = r[3] / cf[0];
	r[4] = -0.583374 + cf[0];
	r[4] = r[4] - 0.426025;
	if(0.724487 < cf[0])
	r[0] = -0.38562 - -0.210693;
}




############################## 9 ##############################
Diversity:       990 / 1000
Average Fitness: 1.9727e+026
Average Size:    8.921

Current Best Program:
// Fitness Information: 84.4011
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	if(0.198364 < r[5])
	r[3] = cf[0] * cf[0];
	//r[1] = 0.547546 / r[3];
	r[5] = r[4] - cf[0];
	//r[1] = r[1] * -0.433533;
	r[1] = 0.555176 - r[5];
	if(r[1] < -0.433533)
	r[0] = -0.38562 - -0.210693;
	if(0.499512 < cf[0])
	r[3] = cf[0] * r[0];
	if(0.499512 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = 0.555176 - r[5];
	//if(r[1] < -0.433533)
}




############################## 10 ##############################
Diversity:       987 / 1000
Average Fitness: 1.07699e+054
Average Size:    9.134

Current Best Program:
// Fitness Information: 84.4011
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	if(0.198364 < r[5])
	r[3] = cf[0] * cf[0];
	//r[1] = 0.547546 / r[3];
	r[5] = r[4] - cf[0];
	//r[1] = r[1] * -0.433533;
	r[1] = 0.555176 - r[5];
	if(r[1] < -0.433533)
	r[0] = -0.38562 - -0.210693;
	if(0.499512 < cf[0])
	r[3] = cf[0] * r[0];
	if(0.499512 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = 0.555176 - r[5];
	//if(r[1] < -0.433533)
}




############################## 11 ##############################
Diversity:       987 / 1000
Average Fitness: 1.15409e+026
Average Size:    9.406

Current Best Program:
// Fitness Information: 81.2703
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	if(0.198364 < r[5])
	r[0] = 0.285583 / r[2];
	if(r[2] < 0.0505371)
	r[0] = r[5] + 0.157959;
	r[3] = r[5] * r[0];
	if(0.833801 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = 0.555176 - r[5];
	//if(r[1] < -0.433533)
}




############################## 12 ##############################
Diversity:       986 / 1000
Average Fitness: 6.45916e+053
Average Size:    9.694

Current Best Program:
// Fitness Information: 81.2703
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	if(0.198364 < r[5])
	r[0] = 0.285583 / r[2];
	if(r[2] < 0.0505371)
	r[0] = r[5] + 0.157959;
	r[3] = r[5] * r[0];
	if(0.833801 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = 0.555176 - r[5];
	//if(r[1] < -0.433533)
}




############################## 13 ##############################
Diversity:       990 / 1000
Average Fitness: 2.78317e+025
Average Size:    9.798

Current Best Program:
// Fitness Information: 80.5992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	if(r[2] < cf[0])
	r[2] = cf[0] * cf[0];
	//r[1] = 0.547546 / cf[0];
	r[1] = r[2] - cf[0];
	r[3] = cf[0] * r[0];
	r[2] = r[3] + r[0];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 14 ##############################
Diversity:       985 / 1000
Average Fitness: 1.21381e+026
Average Size:    9.89

Current Best Program:
// Fitness Information: 80.5992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	if(r[2] < cf[0])
	r[2] = cf[0] * cf[0];
	//r[1] = 0.547546 / cf[0];
	r[1] = r[2] - cf[0];
	r[3] = cf[0] * r[0];
	r[2] = r[3] + r[0];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 15 ##############################
Diversity:       986 / 1000
Average Fitness: 1.16518e+026
Average Size:    9.766

Current Best Program:
// Fitness Information: 80.5992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	if(r[2] < cf[0])
	r[2] = cf[0] * cf[0];
	//r[1] = 0.547546 / cf[0];
	r[1] = r[2] - cf[0];
	r[3] = cf[0] * r[0];
	r[2] = r[3] + r[0];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 16 ##############################
Diversity:       986 / 1000
Average Fitness: 3.91329e+025
Average Size:    9.809

Current Best Program:
// Fitness Information: 80.5992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	if(r[2] < cf[0])
	r[2] = cf[0] * cf[0];
	//r[1] = 0.547546 / cf[0];
	r[1] = r[2] - cf[0];
	r[3] = cf[0] * r[0];
	r[2] = r[3] + r[0];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 17 ##############################
Diversity:       990 / 1000
Average Fitness: 3.72512e+025
Average Size:    9.97

Current Best Program:
// Fitness Information: 79.7462
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[4] = cf[0] / r[2];
	r[0] = r[5] - -0.036499;
	r[2] = cf[0] / cf[0];
	r[1] = cf[0] * cf[0];
	if(0.752258 < cf[0])
	r[0] = -0.38562 - -0.210693;
	if(0.499512 < cf[0])
	r[2] = cf[0] - cf[0];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
}




############################## 18 ##############################
Diversity:       986 / 1000
Average Fitness: 1.34225e+023
Average Size:    10.101

Current Best Program:
// Fitness Information: 79.7462
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[4] = cf[0] / r[2];
	r[0] = r[5] - -0.036499;
	r[2] = cf[0] / cf[0];
	r[1] = cf[0] * cf[0];
	if(0.752258 < cf[0])
	r[0] = -0.38562 - -0.210693;
	if(0.499512 < cf[0])
	r[2] = cf[0] - cf[0];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
}




############################## 19 ##############################
Diversity:       988 / 1000
Average Fitness: 3.72706e+025
Average Size:    10.793

Current Best Program:
// Fitness Information: 73.9222
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	if(cf[0] < r[0])
	r[0] = cf[0] * cf[0];
	//r[1] = cf[0] / cf[0];
	r[5] = r[4] - cf[0];
	//r[1] = r[1] * -0.433533;
	r[1] = 0.555176 - r[5];
	if(r[1] < -0.433533)
	r[0] = -0.38562 - -0.210693;
	if(0.499512 < -0.863403)
	r[3] = cf[0] * r[0];
	if(0.499512 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = 0.555176 - r[5];
	//if(r[1] < -0.433533)
}




############################## 20 ##############################
Diversity:       985 / 1000
Average Fitness: 2.57174e+024
Average Size:    10.984

Current Best Program:
// Fitness Information: 61.8575
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[0] = -0.454285 * -0.458557;
	r[3] = cf[0] * cf[0];
	//r[5] = cf[0] - -0.520081;
	//r[1] = 0.547546 / r[3];
	r[5] = r[4] - cf[0];
	//r[1] = r[1] * -0.433533;
	r[1] = 0.555176 - r[5];
	if(r[1] < -0.433533)
	r[0] = -0.38562 - -0.210693;
	if(0.499512 < cf[0])
	r[3] = cf[0] * r[0];
	if(0.499512 < cf[0])
	r[0] = -0.38562 - -0.210693;
	r[1] = r[0] + cf[0];
	//if(r[1] < -0.433533)
}




############################## 21 ##############################
Diversity:       987 / 1000
Average Fitness: 1.12665e+026
Average Size:    11.336

Current Best Program:
// Fitness Information: 36.8231
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	if(r[2] < cf[0])
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - cf[0];
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 22 ##############################
Diversity:       985 / 1000
Average Fitness: 4.31513e+026
Average Size:    11.421

Current Best Program:
// Fitness Information: 36.8231
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	if(r[2] < cf[0])
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - cf[0];
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 23 ##############################
Diversity:       988 / 1000
Average Fitness: 2.7198e+025
Average Size:    11.723

Current Best Program:
// Fitness Information: 36.8231
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	if(r[2] < cf[0])
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - cf[0];
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 24 ##############################
Diversity:       993 / 1000
Average Fitness: 7.77139e+025
Average Size:    11.845

Current Best Program:
// Fitness Information: 36.8231
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	if(r[2] < cf[0])
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - cf[0];
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 25 ##############################
Diversity:       994 / 1000
Average Fitness: 3.90397e+025
Average Size:    12.099

Current Best Program:
// Fitness Information: 36.8231
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	if(r[2] < cf[0])
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - cf[0];
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 26 ##############################
Diversity:       992 / 1000
Average Fitness: 7.02847e+053
Average Size:    12.279

Current Best Program:
// Fitness Information: 28.6163
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[4] = cf[0] / r[2];
	//r[0] = r[5] - -0.036499;
	r[2] = cf[0] / cf[0];
	r[1] = cf[0] * cf[0];
	//if(0.752258 < cf[0])
	//r[0] = -0.38562 - -0.210693;
	r[3] = cf[0] * cf[0];
	r[0] = r[2] - r[3];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
}




############################## 27 ##############################
Diversity:       991 / 1000
Average Fitness: 4.35869e+054
Average Size:    12.689

Current Best Program:
// Fitness Information: 28.6163
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[4] = cf[0] / r[2];
	//r[0] = r[5] - -0.036499;
	r[2] = cf[0] / cf[0];
	r[1] = cf[0] * cf[0];
	//if(0.752258 < cf[0])
	//r[0] = -0.38562 - -0.210693;
	r[3] = cf[0] * cf[0];
	r[0] = r[2] - r[3];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
}




############################## 28 ##############################
Diversity:       994 / 1000
Average Fitness: 3.63901e+025
Average Size:    12.977

Current Best Program:
// Fitness Information: 28.6163
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[4] = cf[0] / r[2];
	//r[0] = r[5] - -0.036499;
	r[2] = cf[0] / cf[0];
	r[1] = cf[0] * cf[0];
	//if(0.752258 < cf[0])
	//r[0] = -0.38562 - -0.210693;
	r[3] = cf[0] * cf[0];
	r[0] = r[2] - r[3];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
}




############################## 29 ##############################
Diversity:       993 / 1000
Average Fitness: 5.56633e+025
Average Size:    13.391

Current Best Program:
// Fitness Information: 15.8401
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	//r[2] = 0.232971 - cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.665466;
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 30 ##############################
Diversity:       994 / 1000
Average Fitness: 2.19999e+026
Average Size:    13.699

Current Best Program:
// Fitness Information: 15.8401
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	//r[2] = 0.232971 - cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.665466;
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 31 ##############################
Diversity:       993 / 1000
Average Fitness: 1.07955e+026
Average Size:    13.768

Current Best Program:
// Fitness Information: 15.8401
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	//r[2] = 0.232971 - cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.665466;
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 32 ##############################
Diversity:       989 / 1000
Average Fitness: 8.48572e+054
Average Size:    13.792

Current Best Program:
// Fitness Information: 15.8401
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	//r[2] = 0.232971 - cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.665466;
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 33 ##############################
Diversity:       990 / 1000
Average Fitness: 1.24277e+026
Average Size:    13.816

Current Best Program:
// Fitness Information: 15.8401
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	//r[2] = 0.232971 - cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.665466;
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 34 ##############################
Diversity:       987 / 1000
Average Fitness: 1.46372e+026
Average Size:    13.945

Current Best Program:
// Fitness Information: 15.8401
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	//r[2] = 0.232971 - cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.665466;
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 35 ##############################
Diversity:       990 / 1000
Average Fitness: 1.23525e+055
Average Size:    13.95

Current Best Program:
// Fitness Information: 15.8401
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	//r[2] = 0.232971 - cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.665466;
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 36 ##############################
Diversity:       992 / 1000
Average Fitness: 9.76882e+054
Average Size:    13.767

Current Best Program:
// Fitness Information: 15.8401
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	//r[2] = 0.232971 - cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.665466;
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 37 ##############################
Diversity:       992 / 1000
Average Fitness: 8.48572e+054
Average Size:    13.726

Current Best Program:
// Fitness Information: 15.8401
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = -0.38562 - -0.210693;
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	r[0] = -0.144287 + 0.157959;
	//r[2] = 0.232971 - cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.665466;
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(r[1] < -0.433533)
}




############################## 38 ##############################
Diversity:       991 / 1000
Average Fitness: 8.48572e+054
Average Size:    13.788

Current Best Program:
// Fitness Information: 15.2433
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[0] * cf[0];
	//if(cf[0] < cf[0])
	//r[3] = cf[0] / cf[0];
	//r[0] = -0.144287 + 0.157959;
	//r[1] = r[2] - cf[0];
	//r[5] = 0.547546 / cf[0];
	//r[2] = cf[0] * cf[0];
	//r[2] = r[2] - cf[0];
	r[0] = -0.144287 + 0.157959;
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	r[3] = cf[0] * r[0];
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.419861 - -0.210693;
	//if(r[4] < -0.433533)
}




############################## 39 ##############################
Diversity:       993 / 1000
Average Fitness: 1.69714e+055
Average Size:    13.921

Current Best Program:
// Fitness Information: 14.2567
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[3] + r[0];
	//r[0] = 0.252075 - r[4];
	r[0] = -0.144287 + 0.157959;
	r[4] = r[1] + cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.178345 / -0.586792;
}




############################## 40 ##############################
Diversity:       993 / 1000
Average Fitness: 2.55892e+055
Average Size:    13.921

Current Best Program:
// Fitness Information: 14.2567
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[3] + r[0];
	//r[0] = 0.252075 - r[4];
	r[0] = -0.144287 + 0.157959;
	r[4] = r[1] + cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.178345 / -0.586792;
}




############################## 41 ##############################
Diversity:       994 / 1000
Average Fitness: 3.39429e+055
Average Size:    14.057

Current Best Program:
// Fitness Information: 14.2567
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[3] + r[0];
	//r[0] = 0.252075 - r[4];
	r[0] = -0.144287 + 0.157959;
	r[4] = r[1] + cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.178345 / -0.586792;
}




############################## 42 ##############################
Diversity:       994 / 1000
Average Fitness: 8.48572e+054
Average Size:    14.281

Current Best Program:
// Fitness Information: 13.4276
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[1] = r[3] + r[0];
	r[0] = 0.252075 - r[4];
	r[1] = -0.650024 * r[1];
	r[4] = r[1] + cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.178345 / -0.586792;
}




############################## 43 ##############################
Diversity:       995 / 1000
Average Fitness: 8.48572e+054
Average Size:    14.655

Current Best Program:
// Fitness Information: 13.4276
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[1] = r[3] + r[0];
	r[0] = 0.252075 - r[4];
	r[1] = -0.650024 * r[1];
	r[4] = r[1] + cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.178345 / -0.586792;
}




############################## 44 ##############################
Diversity:       995 / 1000
Average Fitness: 8.48572e+054
Average Size:    14.808

Current Best Program:
// Fitness Information: 13.4276
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[1] = r[3] + r[0];
	r[0] = 0.252075 - r[4];
	r[1] = -0.650024 * r[1];
	r[4] = r[1] + cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.178345 / -0.586792;
}




############################## 45 ##############################
Diversity:       997 / 1000
Average Fitness: 4.39277e+025
Average Size:    15.126

Current Best Program:
// Fitness Information: 13.4276
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[1] = r[3] + r[0];
	r[0] = 0.252075 - r[4];
	r[1] = -0.650024 * r[1];
	r[4] = r[1] + cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.178345 / -0.586792;
}




############################## 46 ##############################
Diversity:       996 / 1000
Average Fitness: 2.78317e+025
Average Size:    15.382

Current Best Program:
// Fitness Information: 13.0412
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = r[2] * r[4];
	r[0] = 0.252075 - r[4];
	r[0] = -0.144287 + r[0];
	r[4] = r[1] + cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - 0.47522;
}




############################## 47 ##############################
Diversity:       996 / 1000
Average Fitness: 1.61083e+051
Average Size:    15.631

Current Best Program:
// Fitness Information: 13.0412
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = r[2] * r[4];
	r[0] = 0.252075 - r[4];
	r[0] = -0.144287 + r[0];
	r[4] = r[1] + cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - 0.47522;
}




############################## 48 ##############################
Diversity:       995 / 1000
Average Fitness: 8.48572e+054
Average Size:    15.737

Current Best Program:
// Fitness Information: 13.0412
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = r[2] * r[4];
	r[0] = 0.252075 - r[4];
	r[0] = -0.144287 + r[0];
	r[4] = r[1] + cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - 0.47522;
}




############################## 49 ##############################
Diversity:       995 / 1000
Average Fitness: 1.69714e+055
Average Size:    15.613

Current Best Program:
// Fitness Information: 13.0412
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = r[2] * r[4];
	r[0] = 0.252075 - r[4];
	r[0] = -0.144287 + r[0];
	r[4] = r[1] + cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - 0.47522;
}




############################## 50 ##############################
Diversity:       996 / 1000
Average Fitness: 1.69714e+055
Average Size:    15.188

Current Best Program:
// Fitness Information: 12.8979
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[3] + r[0];
	r[0] = 0.252075 - 0.107361;
	r[1] = -0.144287 + 0.157959;
	r[4] = r[1] + cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = cf[0] + 0.586792;
}




############################## 51 ##############################
Diversity:       998 / 1000
Average Fitness: 2.50026e+027
Average Size:    14.98

Current Best Program:
// Fitness Information: 12.8979
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[3] + r[0];
	r[0] = 0.252075 - 0.107361;
	r[1] = -0.144287 + 0.157959;
	r[4] = r[1] + cf[0];
	r[2] = cf[0] * cf[0];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = cf[0] + 0.586792;
}




############################## 52 ##############################
Diversity:       996 / 1000
Average Fitness: 1.21318e+055
Average Size:    14.724

Current Best Program:
// Fitness Information: 12.111
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[2] = 0.341492 + r[0];
	r[0] = 0.252075 - r[4];
	r[3] = cf[0] * r[0];
	//r[1] = r[2] - 0.665466;
	r[4] = r[2] * cf[0];
	r[2] = cf[0] * cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(0.178345 < -0.586792)
}




############################## 53 ##############################
Diversity:       996 / 1000
Average Fitness: 6.26083e+025
Average Size:    14.251

Current Best Program:
// Fitness Information: 12.111
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[2] = 0.341492 + r[0];
	r[0] = 0.252075 - r[4];
	r[3] = cf[0] * r[0];
	//r[1] = r[2] - 0.665466;
	r[4] = r[2] * cf[0];
	r[2] = cf[0] * cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.210693;
	//if(0.178345 < -0.586792)
}




############################## 54 ##############################
Diversity:       997 / 1000
Average Fitness: 2.85404e+026
Average Size:    13.998

Current Best Program:
// Fitness Information: 8.8733
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(cf[0] < 0.90741)
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - 0.47522;
}




############################## 55 ##############################
Diversity:       996 / 1000
Average Fitness: 1.69714e+055
Average Size:    13.869

Current Best Program:
// Fitness Information: 8.8733
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(cf[0] < 0.90741)
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - 0.47522;
}




############################## 56 ##############################
Diversity:       994 / 1000
Average Fitness: 1.69714e+055
Average Size:    13.835

Current Best Program:
// Fitness Information: 8.8733
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(cf[0] < 0.90741)
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - 0.47522;
}




############################## 57 ##############################
Diversity:       994 / 1000
Average Fitness: 8.48572e+054
Average Size:    13.538

Current Best Program:
// Fitness Information: 8.8733
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(cf[0] < 0.90741)
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - 0.47522;
}




############################## 58 ##############################
Diversity:       989 / 1000
Average Fitness: 1.10694e+055
Average Size:    13.685

Current Best Program:
// Fitness Information: 8.8733
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(cf[0] < 0.90741)
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - 0.47522;
}




############################## 59 ##############################
Diversity:       995 / 1000
Average Fitness: 8.48572e+054
Average Size:    13.421

Current Best Program:
// Fitness Information: 8.8733
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(cf[0] < 0.90741)
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - 0.47522;
}




############################## 60 ##############################
Diversity:       990 / 1000
Average Fitness: 1.69714e+055
Average Size:    13.284

Current Best Program:
// Fitness Information: 8.8733
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(cf[0] < 0.90741)
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - 0.47522;
}




############################## 61 ##############################
Diversity:       988 / 1000
Average Fitness: 2.78317e+025
Average Size:    13.526

Current Best Program:
// Fitness Information: 8.26651
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[4] = 0.252075 - r[4];
	r[2] = r[1] - cf[0];
	if(cf[0] < r[2])
	if(cf[0] < 0.90741)
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - -0.61438;
}




############################## 62 ##############################
Diversity:       988 / 1000
Average Fitness: 9.26032e+054
Average Size:    13.698

Current Best Program:
// Fitness Information: 8.26651
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[4] = 0.252075 - r[4];
	r[2] = r[1] - cf[0];
	if(cf[0] < r[2])
	if(cf[0] < 0.90741)
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - -0.61438;
}




############################## 63 ##############################
Diversity:       992 / 1000
Average Fitness: 1.69714e+055
Average Size:    14.003

Current Best Program:
// Fitness Information: 8.26651
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[4] = 0.252075 - r[4];
	r[2] = r[1] - cf[0];
	if(cf[0] < r[2])
	if(cf[0] < 0.90741)
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - -0.61438;
}




############################## 64 ##############################
Diversity:       990 / 1000
Average Fitness: 3.71757e+055
Average Size:    14.287

Current Best Program:
// Fitness Information: 8.26651
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[4] = 0.252075 - r[4];
	r[2] = r[1] - cf[0];
	if(cf[0] < r[2])
	if(cf[0] < 0.90741)
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - -0.61438;
}




############################## 65 ##############################
Diversity:       992 / 1000
Average Fitness: 1.10694e+055
Average Size:    14.686

Current Best Program:
// Fitness Information: 8.26651
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[4] = 0.252075 - r[4];
	r[2] = r[1] - cf[0];
	if(cf[0] < r[2])
	if(cf[0] < 0.90741)
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.210693;
	r[3] = 0.574219 - -0.61438;
}




############################## 66 ##############################
Diversity:       993 / 1000
Average Fitness: 1.10694e+055
Average Size:    15.054

Current Best Program:
// Fitness Information: 5.34767
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//r[1] = cf[0] - cf[0];
	//r[2] = r[1] - cf[0];
	//if(cf[0] < r[2])
	//r[3] = 0.44989 * -0.411621;
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - r[0];
	r[3] = 0.574219 - -0.61438;
}




############################## 67 ##############################
Diversity:       994 / 1000
Average Fitness: 1.95551e+055
Average Size:    15.666

Current Best Program:
// Fitness Information: 4.39917
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[0] = 0.252075 - r[4];
	//r[2] = r[1] - cf[0];
	//if(cf[0] < r[2])
	//if(cf[0] < 0.90741)
	//if(cf[0] < 0.178589)
	//r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[4] = r[0] * cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.52179 - -0.210693;
	r[3] = 0.574219 - 0.47522;
}




############################## 68 ##############################
Diversity:       991 / 1000
Average Fitness: 1.61016e+026
Average Size:    16.095

Current Best Program:
// Fitness Information: 4.39917
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[0] = 0.252075 - r[4];
	//r[2] = r[1] - cf[0];
	//if(cf[0] < r[2])
	//if(cf[0] < 0.90741)
	//if(cf[0] < 0.178589)
	//r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[4] = r[0] * cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.52179 - -0.210693;
	r[3] = 0.574219 - 0.47522;
}




############################## 69 ##############################
Diversity:       997 / 1000
Average Fitness: 7.87746e+083
Average Size:    16.146

Current Best Program:
// Fitness Information: 3.48085
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 70 ##############################
Diversity:       994 / 1000
Average Fitness: 3.12444e+055
Average Size:    16.185

Current Best Program:
// Fitness Information: 3.48085
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 71 ##############################
Diversity:       993 / 1000
Average Fitness: 1.20497e+055
Average Size:    16.168

Current Best Program:
// Fitness Information: 3.48085
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 72 ##############################
Diversity:       992 / 1000
Average Fitness: 5.89872e+024
Average Size:    16.421

Current Best Program:
// Fitness Information: 3.48085
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 73 ##############################
Diversity:       995 / 1000
Average Fitness: 6.67305e+025
Average Size:    16.976

Current Best Program:
// Fitness Information: 3.48085
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 74 ##############################
Diversity:       993 / 1000
Average Fitness: 1.48409e+026
Average Size:    16.915

Current Best Program:
// Fitness Information: 3.48085
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 75 ##############################
Diversity:       990 / 1000
Average Fitness: 1551.51
Average Size:    16.595

Current Best Program:
// Fitness Information: 3.48085
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//r[0] = 0.252075 - r[4];
	r[2] = 0.232971 * cf[0];
	if(cf[0] < r[2])
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 76 ##############################
Diversity:       991 / 1000
Average Fitness: 2.02043e+055
Average Size:    16.285

Current Best Program:
// Fitness Information: 3.476
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[0] = 0.252075 - 0.164063;
	r[2] = r[1] - cf[0];
	if(cf[0] < r[2])
	if(r[4] < cf[0])
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = cf[0] / r[2];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.52179 - -0.210693;
	//if(-0.825562 < r[1])
}




############################## 77 ##############################
Diversity:       995 / 1000
Average Fitness: 2.02043e+055
Average Size:    16.335

Current Best Program:
// Fitness Information: 3.476
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[0] = 0.252075 - 0.164063;
	r[2] = r[1] - cf[0];
	if(cf[0] < r[2])
	if(r[4] < cf[0])
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = cf[0] / r[2];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.52179 - -0.210693;
	//if(-0.825562 < r[1])
}




############################## 78 ##############################
Diversity:       995 / 1000
Average Fitness: 6.66811e+052
Average Size:    16.682

Current Best Program:
// Fitness Information: 3.476
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	r[0] = 0.252075 - 0.164063;
	r[2] = r[1] - cf[0];
	if(cf[0] < r[2])
	if(r[4] < cf[0])
	if(cf[0] < 0.178589)
	r[4] = -0.38562 - r[4];
	r[2] = cf[0] * r[5];
	r[5] = cf[0] / r[2];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.52179 - -0.210693;
	//if(-0.825562 < r[1])
}




############################## 79 ##############################
Diversity:       997 / 1000
Average Fitness: 2.02043e+055
Average Size:    17.138

Current Best Program:
// Fitness Information: 3.46175
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//r[0] = 0.252075 - r[4];
	//r[2] = 0.232971 * cf[0];
	//if(cf[0] < cf[0])
	//if(cf[0] < cf[0])
	//r[3] = cf[0] + -0.302673;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	if(-0.825562 < r[1])
	r[0] = -0.52179 - -0.210693;
	r[3] = -0.0814209 - 0.47522;
}




############################## 80 ##############################
Diversity:       991 / 1000
Average Fitness: 8.34402e+054
Average Size:    17.731

Current Best Program:
// Fitness Information: 3.46175
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//r[0] = 0.252075 - r[4];
	//r[2] = 0.232971 * cf[0];
	//if(cf[0] < cf[0])
	//if(cf[0] < cf[0])
	//r[3] = cf[0] + -0.302673;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	if(-0.825562 < r[1])
	r[0] = -0.52179 - -0.210693;
	r[3] = -0.0814209 - 0.47522;
}




############################## 81 ##############################
Diversity:       992 / 1000
Average Fitness: 2.02043e+055
Average Size:    18.028

Current Best Program:
// Fitness Information: 3.46175
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//r[0] = 0.252075 - r[4];
	//r[2] = 0.232971 * cf[0];
	//if(cf[0] < cf[0])
	//if(cf[0] < cf[0])
	//r[3] = cf[0] + -0.302673;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	if(-0.825562 < r[1])
	r[0] = -0.52179 - -0.210693;
	r[3] = -0.0814209 - 0.47522;
}




############################## 82 ##############################
Diversity:       990 / 1000
Average Fitness: 2.02043e+055
Average Size:    18.972

Current Best Program:
// Fitness Information: 3.46175
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//r[0] = 0.252075 - r[4];
	//r[2] = 0.232971 * cf[0];
	//if(cf[0] < cf[0])
	//if(cf[0] < cf[0])
	//r[3] = cf[0] + -0.302673;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	if(-0.825562 < r[1])
	r[0] = -0.52179 - -0.210693;
	r[3] = -0.0814209 - 0.47522;
}




############################## 83 ##############################
Diversity:       991 / 1000
Average Fitness: 2.75423e+026
Average Size:    19.524

Current Best Program:
// Fitness Information: 3.18596
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//r[0] = 0.252075 - r[4];
	//r[2] = 0.232971 * cf[0];
	//r[1] = 0.0692139 + 0.487427;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = 0.547546 / 0.0498657;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	if(cf[0] < 0.0317993)
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 84 ##############################
Diversity:       989 / 1000
Average Fitness: 7.20319e+025
Average Size:    19.603

Current Best Program:
// Fitness Information: 3.12513
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//r[0] = r[1] + cf[0];
	//r[2] = r[1] - cf[0];
	//r[5] = 0.975708 + 0.700867;
	//r[0] = 0.99231 - r[2];
	//if(r[1] < -0.433655)
	//r[1] = -0.245605 * 0.836914;
	//r[5] = r[2] / cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] * 0.947937;
	r[0] = -0.144287 + 0.157959;
	//r[4] = -0.812012 / 0.667603;
	//r[1] = cf[0] * r[1];
	//r[3] = r[5] - -0.814575;
	r[5] = cf[0] * 0.648071;
	r[2] = cf[0] * r[5];
	r[4] = r[0] * cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	r[3] = -0.0814209 - 0.47522;
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.499512 < r[1])
}




############################## 85 ##############################
Diversity:       988 / 1000
Average Fitness: 2.06714e+055
Average Size:    20.154

Current Best Program:
// Fitness Information: 3.12513
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//r[0] = r[1] + cf[0];
	//r[2] = r[1] - cf[0];
	//r[5] = 0.975708 + 0.700867;
	//r[0] = 0.99231 - r[2];
	//if(r[1] < -0.433655)
	//r[1] = -0.245605 * 0.836914;
	//r[5] = r[2] / cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] * 0.947937;
	r[0] = -0.144287 + 0.157959;
	//r[4] = -0.812012 / 0.667603;
	//r[1] = cf[0] * r[1];
	//r[3] = r[5] - -0.814575;
	r[5] = cf[0] * 0.648071;
	r[2] = cf[0] * r[5];
	r[4] = r[0] * cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	r[3] = -0.0814209 - 0.47522;
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.499512 < r[1])
}




############################## 86 ##############################
Diversity:       983 / 1000
Average Fitness: 2.02043e+055
Average Size:    20.618

Current Best Program:
// Fitness Information: 3.12513
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//r[0] = r[1] + cf[0];
	//r[2] = r[1] - cf[0];
	//r[5] = 0.975708 + 0.700867;
	//r[0] = 0.99231 - r[2];
	//if(r[1] < -0.433655)
	//r[1] = -0.245605 * 0.836914;
	//r[5] = r[2] / cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] * 0.947937;
	r[0] = -0.144287 + 0.157959;
	//r[4] = -0.812012 / 0.667603;
	//r[1] = cf[0] * r[1];
	//r[3] = r[5] - -0.814575;
	r[5] = cf[0] * 0.648071;
	r[2] = cf[0] * r[5];
	r[4] = r[0] * cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	r[3] = -0.0814209 - 0.47522;
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.499512 < r[1])
}




############################## 87 ##############################
Diversity:       994 / 1000
Average Fitness: 4.04085e+055
Average Size:    22.264

Current Best Program:
// Fitness Information: 3.12513
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//r[0] = r[1] + cf[0];
	//r[2] = r[1] - cf[0];
	//r[5] = 0.975708 + 0.700867;
	//r[0] = 0.99231 - r[2];
	//if(r[1] < -0.433655)
	//r[1] = -0.245605 * 0.836914;
	//r[5] = r[2] / cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] * 0.947937;
	r[0] = -0.144287 + 0.157959;
	//r[4] = -0.812012 / 0.667603;
	//r[1] = cf[0] * r[1];
	//r[3] = r[5] - -0.814575;
	r[5] = cf[0] * 0.648071;
	r[2] = cf[0] * r[5];
	r[4] = r[0] * cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	r[3] = -0.0814209 - 0.47522;
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.499512 < r[1])
}




############################## 88 ##############################
Diversity:       992 / 1000
Average Fitness: 3.56397e+054
Average Size:    23.785

Current Best Program:
// Fitness Information: 2.82939
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 89 ##############################
Diversity:       988 / 1000
Average Fitness: 7.68974e+025
Average Size:    25.504

Current Best Program:
// Fitness Information: 2.82939
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 90 ##############################
Diversity:       990 / 1000
Average Fitness: 21386.3
Average Size:    26.116

Current Best Program:
// Fitness Information: 2.82939
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 91 ##############################
Diversity:       987 / 1000
Average Fitness: 3807.79
Average Size:    26.058

Current Best Program:
// Fitness Information: 2.82939
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 92 ##############################
Diversity:       990 / 1000
Average Fitness: 2.60011e+024
Average Size:    26.871

Current Best Program:
// Fitness Information: 2.82939
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 93 ##############################
Diversity:       988 / 1000
Average Fitness: 2.02043e+055
Average Size:    27.184

Current Best Program:
// Fitness Information: 2.82939
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 94 ##############################
Diversity:       989 / 1000
Average Fitness: 4.04085e+055
Average Size:    27.64

Current Best Program:
// Fitness Information: 2.82939
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 95 ##############################
Diversity:       990 / 1000
Average Fitness: 2.02043e+055
Average Size:    28.633

Current Best Program:
// Fitness Information: 2.82939
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 96 ##############################
Diversity:       987 / 1000
Average Fitness: 1.10066e+024
Average Size:    28.133

Current Best Program:
// Fitness Information: 2.82939
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	if(0.817505 < r[1])
	r[3] = -0.0814209 - 0.47522;
}




############################## 97 ##############################
Diversity:       984 / 1000
Average Fitness: 1.85583e+025
Average Size:    28.132

Current Best Program:
// Fitness Information: 2.76426
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//r[0] = -0.180054 + -0.735474;
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[0];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 - r[1];
	r[3] = -0.0814209 - cf[0];
}




############################## 98 ##############################
Diversity:       980 / 1000
Average Fitness: 5.09591e+054
Average Size:    26.935

Current Best Program:
// Fitness Information: 2.69993
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	if(-0.180054 < -0.735474)
	r[4] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.0814209 - cf[0];
}




############################## 99 ##############################
Diversity:       983 / 1000
Average Fitness: 2.02043e+055
Average Size:    25.467

Current Best Program:
// Fitness Information: 2.69993
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	if(-0.180054 < -0.735474)
	r[4] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.0814209 - cf[0];
}




############################## 100 ##############################
Diversity:       980 / 1000
Average Fitness: 2.65792e+054
Average Size:    24.375

Current Best Program:
// Fitness Information: 2.69993
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	if(-0.180054 < -0.735474)
	r[4] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.0814209 - cf[0];
}




############################## 101 ##############################
Diversity:       988 / 1000
Average Fitness: 8.77498e+025
Average Size:    23.418

Current Best Program:
// Fitness Information: 2.69993
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	if(-0.180054 < -0.735474)
	r[4] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.0814209 - cf[0];
}




############################## 102 ##############################
Diversity:       984 / 1000
Average Fitness: 7.58954e+025
Average Size:    23.567

Current Best Program:
// Fitness Information: 2.69993
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	if(-0.180054 < -0.735474)
	r[4] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.0814209 - cf[0];
}




############################## 103 ##############################
Diversity:       987 / 1000
Average Fitness: 5.6865e+054
Average Size:    22.934

Current Best Program:
// Fitness Information: 2.69993
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	if(-0.180054 < -0.735474)
	r[4] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[5] = r[3] / cf[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.0814209 - cf[0];
}




############################## 104 ##############################
Diversity:       990 / 1000
Average Fitness: 2.02043e+055
Average Size:    22.469

Current Best Program:
// Fitness Information: 2.6904
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 105 ##############################
Diversity:       986 / 1000
Average Fitness: 4.11247e+025
Average Size:    22.582

Current Best Program:
// Fitness Information: 2.6904
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 106 ##############################
Diversity:       988 / 1000
Average Fitness: 2.02043e+055
Average Size:    21.596

Current Best Program:
// Fitness Information: 2.6904
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 107 ##############################
Diversity:       992 / 1000
Average Fitness: 1.53896e+026
Average Size:    21.686

Current Best Program:
// Fitness Information: 2.6904
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 108 ##############################
Diversity:       990 / 1000
Average Fitness: 7.53004e+025
Average Size:    21.539

Current Best Program:
// Fitness Information: 2.6904
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 109 ##############################
Diversity:       990 / 1000
Average Fitness: 4.04085e+055
Average Size:    21.351

Current Best Program:
// Fitness Information: 2.6904
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 110 ##############################
Diversity:       989 / 1000
Average Fitness: 5.26718e+025
Average Size:    21.314

Current Best Program:
// Fitness Information: 2.6904
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 111 ##############################
Diversity:       986 / 1000
Average Fitness: 4.60146e+026
Average Size:    21.58

Current Best Program:
// Fitness Information: 2.6904
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 112 ##############################
Diversity:       991 / 1000
Average Fitness: 4.0047e+023
Average Size:    21.617

Current Best Program:
// Fitness Information: 2.6904
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 113 ##############################
Diversity:       989 / 1000
Average Fitness: 5.97631e+028
Average Size:    21.411

Current Best Program:
// Fitness Information: 2.6904
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[2] = -0.0628662 / cf[0];
	r[5] = cf[0] * 0.648071;
	if(r[5] < 0.197021)
	r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 114 ##############################
Diversity:       991 / 1000
Average Fitness: 7.34177e+025
Average Size:    21.405

Current Best Program:
// Fitness Information: 2.5982
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[3] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	r[3] = r[5] / 0.197021;
	//r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[4] = 0.746216 / r[5];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.957825 < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < r[1])
	//r[1] = 0.817505 * r[1];
	r[1] = cf[0] - r[4];
}




############################## 115 ##############################
Diversity:       987 / 1000
Average Fitness: 4.04085e+055
Average Size:    21.664

Current Best Program:
// Fitness Information: 2.5982
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[3] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	r[3] = r[5] / 0.197021;
	//r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[4] = 0.746216 / r[5];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.957825 < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < r[1])
	//r[1] = 0.817505 * r[1];
	r[1] = cf[0] - r[4];
}




############################## 116 ##############################
Diversity:       991 / 1000
Average Fitness: 2.02043e+055
Average Size:    21.136

Current Best Program:
// Fitness Information: 2.5982
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[3] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	r[3] = r[5] / 0.197021;
	//r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[4] = 0.746216 / r[5];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.957825 < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < r[1])
	//r[1] = 0.817505 * r[1];
	r[1] = cf[0] - r[4];
}




############################## 117 ##############################
Diversity:       986 / 1000
Average Fitness: 1.39402e+026
Average Size:    20.843

Current Best Program:
// Fitness Information: 2.5982
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[3] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	r[3] = r[5] / 0.197021;
	//r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[4] = 0.746216 / r[5];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.957825 < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < r[1])
	//r[1] = 0.817505 * r[1];
	r[1] = cf[0] - r[4];
}




############################## 118 ##############################
Diversity:       989 / 1000
Average Fitness: 1.3468e+026
Average Size:    20.284

Current Best Program:
// Fitness Information: 2.5982
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[3] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	r[3] = r[5] / 0.197021;
	//r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[4] = 0.746216 / r[5];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.957825 < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < r[1])
	//r[1] = 0.817505 * r[1];
	r[1] = cf[0] - r[4];
}




############################## 119 ##############################
Diversity:       994 / 1000
Average Fitness: 3.56397e+054
Average Size:    20.377

Current Best Program:
// Fitness Information: 2.5982
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[3] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	r[3] = r[5] / 0.197021;
	//r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[4] = 0.746216 / r[5];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.957825 < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < r[1])
	//r[1] = 0.817505 * r[1];
	r[1] = cf[0] - r[4];
}




############################## 120 ##############################
Diversity:       989 / 1000
Average Fitness: 6.92987e+025
Average Size:    20.838

Current Best Program:
// Fitness Information: 2.5982
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[3] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	r[3] = r[5] / 0.197021;
	//r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[4] = 0.746216 / r[5];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.957825 < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < r[1])
	//r[1] = 0.817505 * r[1];
	r[1] = cf[0] - r[4];
}




############################## 121 ##############################
Diversity:       986 / 1000
Average Fitness: 2.02043e+055
Average Size:    21.274

Current Best Program:
// Fitness Information: 2.5982
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[3] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	r[3] = r[5] / 0.197021;
	//r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[4] = 0.746216 / r[5];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.957825 < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < r[1])
	//r[1] = 0.817505 * r[1];
	r[1] = cf[0] - r[4];
}




############################## 122 ##############################
Diversity:       991 / 1000
Average Fitness: 9.14707e+054
Average Size:    21.286

Current Best Program:
// Fitness Information: 2.5982
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[3] = r[4] - cf[0];
	//r[0] = r[0] * 0.648071;
	r[3] = r[5] / 0.197021;
	//r[4] = 0.686401 / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[4] = 0.746216 / r[5];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.957825 < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < r[1])
	//r[1] = 0.817505 * r[1];
	r[1] = cf[0] - r[4];
}




############################## 123 ##############################
Diversity:       987 / 1000
Average Fitness: 3.64326e+055
Average Size:    21.39

Current Best Program:
// Fitness Information: 2.58727
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = cf[0] * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	if(r[5] < 0.197021)
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 124 ##############################
Diversity:       988 / 1000
Average Fitness: 2.00714e+028
Average Size:    21.35

Current Best Program:
// Fitness Information: 2.58727
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = cf[0] * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	if(r[5] < 0.197021)
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 125 ##############################
Diversity:       991 / 1000
Average Fitness: 5.16257e+055
Average Size:    21.305

Current Best Program:
// Fitness Information: 2.55935
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[5] = r[3] * cf[0];
	r[5] = cf[0] * 0.592285;
	//r[4] = r[0] - -0.71698;
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.604187 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 + r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 126 ##############################
Diversity:       988 / 1000
Average Fitness: 6.06128e+055
Average Size:    21.362

Current Best Program:
// Fitness Information: 2.55935
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[5] = r[3] * cf[0];
	r[5] = cf[0] * 0.592285;
	//r[4] = r[0] - -0.71698;
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.604187 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 + r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 127 ##############################
Diversity:       985 / 1000
Average Fitness: 2.02043e+055
Average Size:    21.729

Current Best Program:
// Fitness Information: 2.55935
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[5] = r[3] * cf[0];
	r[5] = cf[0] * 0.592285;
	//r[4] = r[0] - -0.71698;
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.604187 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 + r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 128 ##############################
Diversity:       987 / 1000
Average Fitness: 4.04085e+055
Average Size:    21.752

Current Best Program:
// Fitness Information: 2.55935
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[5] = r[3] * cf[0];
	r[5] = cf[0] * 0.592285;
	//r[4] = r[0] - -0.71698;
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.604187 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 + r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 129 ##############################
Diversity:       992 / 1000
Average Fitness: 5.58194e+055
Average Size:    21.735

Current Best Program:
// Fitness Information: 2.55935
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[5] = r[3] * cf[0];
	r[5] = cf[0] * 0.592285;
	//r[4] = r[0] - -0.71698;
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.604187 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 + r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 130 ##############################
Diversity:       989 / 1000
Average Fitness: 2.02043e+055
Average Size:    21.881

Current Best Program:
// Fitness Information: 2.55935
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[5] = r[3] * cf[0];
	r[5] = cf[0] * 0.592285;
	//r[4] = r[0] - -0.71698;
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.604187 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 + r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 131 ##############################
Diversity:       990 / 1000
Average Fitness: 6.06128e+055
Average Size:    22.53

Current Best Program:
// Fitness Information: 2.55935
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[5] = r[3] * cf[0];
	r[5] = cf[0] * 0.592285;
	//r[4] = r[0] - -0.71698;
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.604187 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 + r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 132 ##############################
Diversity:       988 / 1000
Average Fitness: 4.04085e+055
Average Size:    22.547

Current Best Program:
// Fitness Information: 2.55935
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[5] = cf[0] * 0.648071;
	//if(-0.180054 < -0.735474)
	//r[5] = r[3] * cf[0];
	r[5] = cf[0] * 0.592285;
	//r[4] = r[0] - -0.71698;
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.604187 * r[3];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 + r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 133 ##############################
Diversity:       995 / 1000
Average Fitness: 2.02043e+055
Average Size:    23.207

Current Best Program:
// Fitness Information: 2.55666
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = cf[0] * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = -0.417297 + r[2];
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / r[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.957825 < r[1])
	if(0.499512 < r[1])
	r[0] = 0.99231 - r[2];
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[1] < r[0])
	r[1] = r[2] - 0.847839;
	r[3] = r[5] / 0.197021;
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	//if(cf[0] < r[3])
}




############################## 134 ##############################
Diversity:       992 / 1000
Average Fitness: 4.43938e+055
Average Size:    23.459

Current Best Program:
// Fitness Information: 2.55666
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = cf[0] * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = -0.417297 + r[2];
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / r[0];
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.499512 < r[1])
	r[0] = -0.302551 * 0.403259;
	if(0.957825 < r[1])
	if(0.499512 < r[1])
	r[0] = 0.99231 - r[2];
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[1] < r[0])
	r[1] = r[2] - 0.847839;
	r[3] = r[5] / 0.197021;
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	//if(cf[0] < r[3])
}




############################## 135 ##############################
Diversity:       991 / 1000
Average Fitness: 3.7863e+055
Average Size:    23.52

Current Best Program:
// Fitness Information: 2.5467
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = cf[0] * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 136 ##############################
Diversity:       994 / 1000
Average Fitness: 3.50913e+055
Average Size:    24.537

Current Best Program:
// Fitness Information: 2.51267
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.213806 * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	if(r[5] < 0.197021)
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.408508 < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 137 ##############################
Diversity:       993 / 1000
Average Fitness: 2.41895e+055
Average Size:    24.585

Current Best Program:
// Fitness Information: 2.51267
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.213806 * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	if(r[5] < 0.197021)
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.408508 < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 138 ##############################
Diversity:       992 / 1000
Average Fitness: 6.7825e+025
Average Size:    25.778

Current Best Program:
// Fitness Information: 2.51267
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.213806 * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	if(r[5] < 0.197021)
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.408508 < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 139 ##############################
Diversity:       987 / 1000
Average Fitness: 6.85833e+055
Average Size:    26.321

Current Best Program:
// Fitness Information: 2.51267
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.213806 * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	if(r[5] < 0.197021)
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.408508 < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 140 ##############################
Diversity:       985 / 1000
Average Fitness: 4.7987e+054
Average Size:    26.712

Current Best Program:
// Fitness Information: 2.51267
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.213806 * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	if(r[5] < 0.197021)
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.408508 < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 141 ##############################
Diversity:       984 / 1000
Average Fitness: 2.41895e+055
Average Size:    26.481

Current Best Program:
// Fitness Information: 2.51267
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.213806 * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	if(r[5] < 0.197021)
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.408508 < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 142 ##############################
Diversity:       988 / 1000
Average Fitness: 7.25685e+055
Average Size:    26.313

Current Best Program:
// Fitness Information: 2.51267
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.213806 * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	if(r[5] < 0.197021)
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.408508 < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 143 ##############################
Diversity:       991 / 1000
Average Fitness: 1.01595e+055
Average Size:    25.863

Current Best Program:
// Fitness Information: 2.51267
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.213806 * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	if(r[5] < 0.197021)
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.408508 < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 144 ##############################
Diversity:       993 / 1000
Average Fitness: 2.41895e+055
Average Size:    25.995

Current Best Program:
// Fitness Information: 2.51267
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.213806 * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	if(r[5] < 0.197021)
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.408508 < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 145 ##############################
Diversity:       988 / 1000
Average Fitness: 2.57651e+026
Average Size:    25.845

Current Best Program:
// Fitness Information: 2.51267
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.213806 * 0.648071;
	if(-0.180054 < -0.735474)
	r[1] = cf[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	if(r[5] < 0.197021)
	r[4] = r[1] / 0.0270996;
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.847839;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(0.408508 < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(0.499512 < r[1])
	r[1] = 0.817505 * r[1];
	r[3] = -0.73938 - cf[0];
}




############################## 146 ##############################
Diversity:       990 / 1000
Average Fitness: 4.43938e+055
Average Size:    25.906

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 147 ##############################
Diversity:       991 / 1000
Average Fitness: 1.58116e+026
Average Size:    27.043

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 148 ##############################
Diversity:       993 / 1000
Average Fitness: 2.41895e+055
Average Size:    27.223

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 149 ##############################
Diversity:       987 / 1000
Average Fitness: 2.45371e+052
Average Size:    27.4

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 150 ##############################
Diversity:       989 / 1000
Average Fitness: 3.87721e+026
Average Size:    27.068

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 151 ##############################
Diversity:       992 / 1000
Average Fitness: 1.66325e+025
Average Size:    26.291

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 152 ##############################
Diversity:       988 / 1000
Average Fitness: 9.3915e+025
Average Size:    26.253

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 153 ##############################
Diversity:       993 / 1000
Average Fitness: 4.8379e+055
Average Size:    25.699

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 154 ##############################
Diversity:       991 / 1000
Average Fitness: 2.41895e+055
Average Size:    25.729

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 155 ##############################
Diversity:       990 / 1000
Average Fitness: 2.41895e+055
Average Size:    26.499

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 156 ##############################
Diversity:       989 / 1000
Average Fitness: 2.79923e+026
Average Size:    26.442

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 157 ##############################
Diversity:       991 / 1000
Average Fitness: 2.47524e+055
Average Size:    25.404

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 158 ##############################
Diversity:       992 / 1000
Average Fitness: 4.8379e+055
Average Size:    24.735

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 159 ##############################
Diversity:       989 / 1000
Average Fitness: 2.52665e+055
Average Size:    25.207

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 160 ##############################
Diversity:       992 / 1000
Average Fitness: 2.27783e+081
Average Size:    25.063

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 161 ##############################
Diversity:       988 / 1000
Average Fitness: 1.068e+026
Average Size:    25.05

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 162 ##############################
Diversity:       990 / 1000
Average Fitness: 7.87746e+083
Average Size:    24.543

Current Best Program:
// Fitness Information: 2.45968
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[0] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[1] = 0.817505 * r[1];
	r[4] = r[4] - r[1];
}




############################## 163 ##############################
Diversity:       989 / 1000
Average Fitness: 5.62855e+053
Average Size:    24.484

Current Best Program:
// Fitness Information: 2.40989
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	//r[4] = cf[0] / cf[0];
	r[4] = -0.636414 + -0.110535;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[4] = cf[0] * cf[0];
	r[4] = r[4] - r[1];
}




############################## 164 ##############################
Diversity:       988 / 1000
Average Fitness: 2.41852e+026
Average Size:    25.02

Current Best Program:
// Fitness Information: 2.40989
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	//r[4] = cf[0] / cf[0];
	r[4] = -0.636414 + -0.110535;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[4] = cf[0] * cf[0];
	r[4] = r[4] - r[1];
}




############################## 165 ##############################
Diversity:       986 / 1000
Average Fitness: 5.62855e+053
Average Size:    24.656

Current Best Program:
// Fitness Information: 2.40989
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	//r[4] = cf[0] / cf[0];
	r[4] = -0.636414 + -0.110535;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[4] = cf[0] * cf[0];
	r[4] = r[4] - r[1];
}




############################## 166 ##############################
Diversity:       990 / 1000
Average Fitness: 7.06504e+053
Average Size:    25.04

Current Best Program:
// Fitness Information: 2.40989
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	//r[4] = cf[0] / cf[0];
	r[4] = -0.636414 + -0.110535;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[4] = cf[0] * cf[0];
	r[4] = r[4] - r[1];
}




############################## 167 ##############################
Diversity:       992 / 1000
Average Fitness: 2.41895e+055
Average Size:    24.692

Current Best Program:
// Fitness Information: 2.40989
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	//r[4] = cf[0] / cf[0];
	r[4] = -0.636414 + -0.110535;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[4] = cf[0] * cf[0];
	r[4] = r[4] - r[1];
}




############################## 168 ##############################
Diversity:       993 / 1000
Average Fitness: 1.12571e+054
Average Size:    24.378

Current Best Program:
// Fitness Information: 2.40989
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	//r[4] = cf[0] / cf[0];
	r[4] = -0.636414 + -0.110535;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[4] = cf[0] * cf[0];
	r[4] = r[4] - r[1];
}




############################## 169 ##############################
Diversity:       993 / 1000
Average Fitness: 2.07807e+025
Average Size:    23.757

Current Best Program:
// Fitness Information: 2.40989
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	//r[4] = cf[0] / cf[0];
	r[4] = -0.636414 + -0.110535;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[4] = cf[0] * cf[0];
	r[4] = r[4] - r[1];
}




############################## 170 ##############################
Diversity:       988 / 1000
Average Fitness: 3.12641e+055
Average Size:    22.752

Current Best Program:
// Fitness Information: 2.40989
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	//r[4] = cf[0] / cf[0];
	r[4] = -0.636414 + -0.110535;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[4] = cf[0] * cf[0];
	r[4] = r[4] - r[1];
}




############################## 171 ##############################
Diversity:       991 / 1000
Average Fitness: 4.52973e+026
Average Size:    22.625

Current Best Program:
// Fitness Information: 2.40989
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	//r[4] = cf[0] / cf[0];
	r[4] = -0.636414 + -0.110535;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[4] = cf[0] * cf[0];
	r[4] = r[4] - r[1];
}




############################## 172 ##############################
Diversity:       989 / 1000
Average Fitness: 2.44001e+055
Average Size:    22.362

Current Best Program:
// Fitness Information: 2.40989
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	//r[4] = cf[0] / cf[0];
	r[4] = -0.636414 + -0.110535;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[4] = cf[0] * cf[0];
	r[4] = r[4] - r[1];
}




############################## 173 ##############################
Diversity:       993 / 1000
Average Fitness: 1.64134e+026
Average Size:    22.276

Current Best Program:
// Fitness Information: 2.40989
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	//r[4] = cf[0] / cf[0];
	r[4] = -0.636414 + -0.110535;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[4] = cf[0] * cf[0];
	r[4] = r[4] - r[1];
}




############################## 174 ##############################
Diversity:       993 / 1000
Average Fitness: 1.63984e+054
Average Size:    22.018

Current Best Program:
// Fitness Information: 2.40989
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//if(0.302734 < -0.735474)
	//r[1] = r[5] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	//r[4] = cf[0] / cf[0];
	r[4] = -0.636414 + -0.110535;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < r[1])
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	r[4] = cf[0] * cf[0];
	r[4] = r[4] - r[1];
}




############################## 175 ##############################
Diversity:       990 / 1000
Average Fitness: 4.8379e+055
Average Size:    21.907

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 176 ##############################
Diversity:       989 / 1000
Average Fitness: 1.07595e+055
Average Size:    21.464

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 177 ##############################
Diversity:       991 / 1000
Average Fitness: 9.31911e+025
Average Size:    20.972

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 178 ##############################
Diversity:       992 / 1000
Average Fitness: 1.07595e+055
Average Size:    20.676

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 179 ##############################
Diversity:       992 / 1000
Average Fitness: 3.4949e+055
Average Size:    20.804

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 180 ##############################
Diversity:       984 / 1000
Average Fitness: 5.70491e+026
Average Size:    20.481

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 181 ##############################
Diversity:       989 / 1000
Average Fitness: 2.64628e+026
Average Size:    20.322

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 182 ##############################
Diversity:       985 / 1000
Average Fitness: 4.17265e+025
Average Size:    21.087

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 183 ##############################
Diversity:       986 / 1000
Average Fitness: 1.07595e+055
Average Size:    21.296

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 184 ##############################
Diversity:       986 / 1000
Average Fitness: 1.50059e+026
Average Size:    21.003

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 185 ##############################
Diversity:       979 / 1000
Average Fitness: 3.68627e+053
Average Size:    21.151

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 186 ##############################
Diversity:       982 / 1000
Average Fitness: 2.98291e+055
Average Size:    21.119

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 187 ##############################
Diversity:       979 / 1000
Average Fitness: 6.34706e+025
Average Size:    21.527

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 188 ##############################
Diversity:       983 / 1000
Average Fitness: 2.45581e+055
Average Size:    21.935

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 189 ##############################
Diversity:       982 / 1000
Average Fitness: 2.45581e+055
Average Size:    21.985

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 190 ##############################
Diversity:       983 / 1000
Average Fitness: 4.41565e+055
Average Size:    22.31

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 191 ##############################
Diversity:       984 / 1000
Average Fitness: 4.8379e+055
Average Size:    22.202

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 192 ##############################
Diversity:       981 / 1000
Average Fitness: 2.62171e+025
Average Size:    22.681

Current Best Program:
// Fitness Information: 2.38122
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[1] = r[0] + 0.723816;
	r[5] = cf[0] * 0.592285;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[0] = -0.38562 - -0.0687866;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = cf[0] * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(0.817505 < r[1])
}




############################## 193 ##############################
Diversity:       981 / 1000
Average Fitness: 7.26196e+025
Average Size:    22.609

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 194 ##############################
Diversity:       983 / 1000
Average Fitness: 7.37255e+053
Average Size:    22.826

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 195 ##############################
Diversity:       985 / 1000
Average Fitness: 4.87477e+055
Average Size:    23.102

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 196 ##############################
Diversity:       984 / 1000
Average Fitness: 3.68627e+053
Average Size:    22.876

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 197 ##############################
Diversity:       980 / 1000
Average Fitness: 7.37255e+053
Average Size:    22.956

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 198 ##############################
Diversity:       983 / 1000
Average Fitness: 5.14563e+055
Average Size:    23.127

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 199 ##############################
Diversity:       984 / 1000
Average Fitness: 4.89419e+055
Average Size:    22.837

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 200 ##############################
Diversity:       978 / 1000
Average Fitness: 2.41895e+055
Average Size:    22.802

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 201 ##############################
Diversity:       983 / 1000
Average Fitness: 9.32877e+025
Average Size:    23.137

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 202 ##############################
Diversity:       985 / 1000
Average Fitness: 2.49268e+055
Average Size:    22.884

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 203 ##############################
Diversity:       984 / 1000
Average Fitness: 1.55102e+025
Average Size:    22.758

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 204 ##############################
Diversity:       982 / 1000
Average Fitness: 2.82275e+055
Average Size:    22.925

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 205 ##############################
Diversity:       981 / 1000
Average Fitness: 1.92332e+026
Average Size:    22.679

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 206 ##############################
Diversity:       984 / 1000
Average Fitness: 2.41895e+055
Average Size:    23.211

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 207 ##############################
Diversity:       983 / 1000
Average Fitness: 2.41895e+055
Average Size:    23.158

Current Best Program:
// Fitness Information: 2.35823
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 208 ##############################
Diversity:       980 / 1000
Average Fitness: 2.41895e+055
Average Size:    23.263

Current Best Program:
// Fitness Information: 2.35742
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - r[4];
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[5] = cf[0] * r[1];
	if(cf[0] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = 0.973816 - r[4];
}




############################## 209 ##############################
Diversity:       981 / 1000
Average Fitness: 1.16015e+025
Average Size:    23.002

Current Best Program:
// Fitness Information: 2.35742
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] + cf[0];
	//r[2] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	//r[3] = 0.432861 + -0.350525;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - r[4];
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	if(0.817505 < -0.451416)
	r[5] = cf[0] * r[1];
	if(cf[0] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = 0.973816 - r[4];
}




############################## 210 ##############################
Diversity:       982 / 1000
Average Fitness: 1.03011e+026
Average Size:    23.106

Current Best Program:
// Fitness Information: 2.33862
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 211 ##############################
Diversity:       980 / 1000
Average Fitness: 6.42773e+024
Average Size:    22.254

Current Best Program:
// Fitness Information: 2.33862
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 212 ##############################
Diversity:       985 / 1000
Average Fitness: 9.30717e+024
Average Size:    22.138

Current Best Program:
// Fitness Information: 2.33862
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 213 ##############################
Diversity:       984 / 1000
Average Fitness: 1.64546e+025
Average Size:    21.951

Current Best Program:
// Fitness Information: 2.33862
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 214 ##############################
Diversity:       987 / 1000
Average Fitness: 3.44377e+026
Average Size:    22.321

Current Best Program:
// Fitness Information: 2.33862
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 215 ##############################
Diversity:       987 / 1000
Average Fitness: 5.22905e+055
Average Size:    22.382

Current Best Program:
// Fitness Information: 2.33862
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 216 ##############################
Diversity:       989 / 1000
Average Fitness: 5.40791e+055
Average Size:    22.569

Current Best Program:
// Fitness Information: 2.33862
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 217 ##############################
Diversity:       989 / 1000
Average Fitness: 2.61453e+055
Average Size:    23.019

Current Best Program:
// Fitness Information: 2.33862
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 218 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    23.011

Current Best Program:
// Fitness Information: 2.33862
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 219 ##############################
Diversity:       989 / 1000
Average Fitness: 1.90394e+026
Average Size:    22.807

Current Best Program:
// Fitness Information: 2.33862
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 220 ##############################
Diversity:       984 / 1000
Average Fitness: 4.46563e+055
Average Size:    23.077

Current Best Program:
// Fitness Information: 2.33862
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] - 0.51947;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[2] = -0.807678 - 0.769592;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 221 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    23.182

Current Best Program:
// Fitness Information: 2.33836
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	if(0.944397 < cf[0])
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 222 ##############################
Diversity:       988 / 1000
Average Fitness: 5.22905e+055
Average Size:    23.617

Current Best Program:
// Fitness Information: 2.33836
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	if(0.944397 < cf[0])
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 223 ##############################
Diversity:       986 / 1000
Average Fitness: 5.258e+026
Average Size:    23.442

Current Best Program:
// Fitness Information: 2.33836
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	if(0.944397 < cf[0])
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 224 ##############################
Diversity:       985 / 1000
Average Fitness: 1.04581e+056
Average Size:    23.937

Current Best Program:
// Fitness Information: 2.33836
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[5] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	if(0.944397 < cf[0])
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 225 ##############################
Diversity:       987 / 1000
Average Fitness: 1.11379e+026
Average Size:    23.584

Current Best Program:
// Fitness Information: 2.32023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[2] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 226 ##############################
Diversity:       984 / 1000
Average Fitness: 3.89254e+025
Average Size:    22.975

Current Best Program:
// Fitness Information: 2.32023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[2] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 227 ##############################
Diversity:       985 / 1000
Average Fitness: 8.09961e+050
Average Size:    22.727

Current Best Program:
// Fitness Information: 2.32023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[2] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 228 ##############################
Diversity:       987 / 1000
Average Fitness: 1.06197e+024
Average Size:    22.872

Current Best Program:
// Fitness Information: 2.32023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[2] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 229 ##############################
Diversity:       993 / 1000
Average Fitness: 2.61453e+055
Average Size:    22.676

Current Best Program:
// Fitness Information: 2.32023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[2] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 230 ##############################
Diversity:       993 / 1000
Average Fitness: 1.30324e+026
Average Size:    22.633

Current Best Program:
// Fitness Information: 2.32023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[2] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 231 ##############################
Diversity:       994 / 1000
Average Fitness: 8.03079e+024
Average Size:    22.526

Current Best Program:
// Fitness Information: 2.32023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[2] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 232 ##############################
Diversity:       988 / 1000
Average Fitness: 2.26787e+026
Average Size:    22.186

Current Best Program:
// Fitness Information: 2.32023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[2] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 233 ##############################
Diversity:       986 / 1000
Average Fitness: 1.16015e+025
Average Size:    22.245

Current Best Program:
// Fitness Information: 2.32023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[2] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 234 ##############################
Diversity:       989 / 1000
Average Fitness: 2.61453e+055
Average Size:    22.341

Current Best Program:
// Fitness Information: 2.32023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[2] = cf[0] / -0.0274048;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 235 ##############################
Diversity:       984 / 1000
Average Fitness: 2.61453e+055
Average Size:    22.359

Current Best Program:
// Fitness Information: 2.31981
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] / 0.8927;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * 0.59198;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 236 ##############################
Diversity:       984 / 1000
Average Fitness: 4.15468e+026
Average Size:    22.222

Current Best Program:
// Fitness Information: 2.31981
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] / 0.8927;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * 0.59198;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 237 ##############################
Diversity:       988 / 1000
Average Fitness: 1.32738e+026
Average Size:    22.624

Current Best Program:
// Fitness Information: 2.31981
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] / 0.8927;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * 0.59198;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 238 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    22.877

Current Best Program:
// Fitness Information: 2.31981
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] / 0.8927;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * 0.59198;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 239 ##############################
Diversity:       991 / 1000
Average Fitness: 5.22905e+055
Average Size:    23.493

Current Best Program:
// Fitness Information: 2.31981
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] / 0.8927;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * 0.59198;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 240 ##############################
Diversity:       986 / 1000
Average Fitness: 8.66241e+025
Average Size:    23.129

Current Best Program:
// Fitness Information: 2.31981
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] / 0.8927;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * 0.59198;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 241 ##############################
Diversity:       987 / 1000
Average Fitness: 2.61453e+055
Average Size:    23.609

Current Best Program:
// Fitness Information: 2.31981
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] / 0.8927;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * 0.59198;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 242 ##############################
Diversity:       986 / 1000
Average Fitness: 2.61453e+055
Average Size:    23.786

Current Best Program:
// Fitness Information: 2.31981
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] / 0.8927;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * 0.59198;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 243 ##############################
Diversity:       988 / 1000
Average Fitness: 5.5174e+025
Average Size:    23.504

Current Best Program:
// Fitness Information: 2.31695
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] - cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[1] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 244 ##############################
Diversity:       991 / 1000
Average Fitness: 2.78393e+025
Average Size:    23.475

Current Best Program:
// Fitness Information: 2.31695
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] - cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[1] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 245 ##############################
Diversity:       989 / 1000
Average Fitness: 4.10124e+025
Average Size:    23.063

Current Best Program:
// Fitness Information: 2.31695
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] - cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[1] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 246 ##############################
Diversity:       982 / 1000
Average Fitness: 4.24655e+054
Average Size:    23.274

Current Best Program:
// Fitness Information: 2.31695
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] - cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[1] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 247 ##############################
Diversity:       986 / 1000
Average Fitness: 2.13874e+025
Average Size:    23.175

Current Best Program:
// Fitness Information: 2.31695
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] - cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[1] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 248 ##############################
Diversity:       979 / 1000
Average Fitness: 52516.8
Average Size:    23.229

Current Best Program:
// Fitness Information: 2.31695
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] - cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[1] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 249 ##############################
Diversity:       979 / 1000
Average Fitness: 2.77133e+025
Average Size:    23.101

Current Best Program:
// Fitness Information: 2.31695
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] - cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[1] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 250 ##############################
Diversity:       987 / 1000
Average Fitness: 2.61453e+055
Average Size:    23.051

Current Best Program:
// Fitness Information: 2.31695
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] - cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[1] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 251 ##############################
Diversity:       984 / 1000
Average Fitness: 5.22905e+055
Average Size:    23.297

Current Best Program:
// Fitness Information: 2.31695
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] - cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[1] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 252 ##############################
Diversity:       985 / 1000
Average Fitness: 2.64241e+055
Average Size:    23.474

Current Best Program:
// Fitness Information: 2.31695
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] - cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[1] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 253 ##############################
Diversity:       988 / 1000
Average Fitness: 3.05097e+026
Average Size:    23.543

Current Best Program:
// Fitness Information: 2.31397
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	//r[1] = cf[0] / 0.8927;
	//r[1] = r[5] + cf[0];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	if(r[4] < r[1])
	if(r[2] < cf[0])
	r[4] = -0.88446 * 0.59198;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//if(cf[0] < cf[0])
}




############################## 254 ##############################
Diversity:       990 / 1000
Average Fitness: 8.16758e+055
Average Size:    24.374

Current Best Program:
// Fitness Information: 2.30536
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] / cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	//r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	//r[2] = cf[0] * r[5];
	//r[2] = r[4] - -0.860291;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//r[2] = cf[0] / -0.0274048;
	r[3] = -0.353516 / 0.675049;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 255 ##############################
Diversity:       990 / 1000
Average Fitness: 3.03748e+053
Average Size:    24.386

Current Best Program:
// Fitness Information: 2.30536
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] / cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	//r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	//r[2] = cf[0] * r[5];
	//r[2] = r[4] - -0.860291;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//r[2] = cf[0] / -0.0274048;
	r[3] = -0.353516 / 0.675049;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 256 ##############################
Diversity:       992 / 1000
Average Fitness: 3.81834e+053
Average Size:    24.643

Current Best Program:
// Fitness Information: 2.30536
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] / cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	//r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	//r[2] = cf[0] * r[5];
	//r[2] = r[4] - -0.860291;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//r[2] = cf[0] / -0.0274048;
	r[3] = -0.353516 / 0.675049;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 257 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    25.363

Current Best Program:
// Fitness Information: 2.30536
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] / cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	//r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	//r[2] = cf[0] * r[5];
	//r[2] = r[4] - -0.860291;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//r[2] = cf[0] / -0.0274048;
	r[3] = -0.353516 / 0.675049;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 258 ##############################
Diversity:       988 / 1000
Average Fitness: 1.86584e+054
Average Size:    25.632

Current Best Program:
// Fitness Information: 2.30269
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] / cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.679504 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	//r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	//r[2] = cf[0] * r[5];
	//r[2] = r[4] - -0.860291;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//r[2] = cf[0] / -0.0274048;
	r[3] = -0.353516 / 0.675049;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 259 ##############################
Diversity:       991 / 1000
Average Fitness: 2.64496e+055
Average Size:    25.532

Current Best Program:
// Fitness Information: 2.30269
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] / cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.679504 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	//r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	//r[2] = cf[0] * r[5];
	//r[2] = r[4] - -0.860291;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//r[2] = cf[0] / -0.0274048;
	r[3] = -0.353516 / 0.675049;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 260 ##############################
Diversity:       993 / 1000
Average Fitness: 2.94642e+055
Average Size:    25.697

Current Best Program:
// Fitness Information: 2.30269
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = cf[0] / -0.0274048;
	r[1] = r[2] / cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.679504 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	//r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	//r[2] = cf[0] * r[5];
	//r[2] = r[4] - -0.860291;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	//r[2] = cf[0] / -0.0274048;
	r[3] = -0.353516 / 0.675049;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 261 ##############################
Diversity:       991 / 1000
Average Fitness: 3.04341e+053
Average Size:    25.964

Current Best Program:
// Fitness Information: 2.30264
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = 0.399231 / -0.0274048;
	r[1] = r[2] - cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] * cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[4] < r[1])
	r[4] = -0.88446 * 0.59198;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 262 ##############################
Diversity:       991 / 1000
Average Fitness: 1.54438e+026
Average Size:    26.058

Current Best Program:
// Fitness Information: 2.30264
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.353516 / cf[0];
	r[2] = 0.399231 / -0.0274048;
	r[1] = r[2] - cf[0];
	//if(cf[0] < r[1])
	//r[4] = -0.88446 * 0.0102539;
	r[0] = -0.302551 / r[1];
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] * cf[0];
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.860291;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < r[0])
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.302551 * r[1];
	r[3] = r[2] / r[0];
	r[1] = r[1] / 0.891907;
	if(r[4] < r[1])
	r[4] = -0.88446 * 0.59198;
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[2] = cf[0] - r[3];
}




############################## 263 ##############################
Diversity:       988 / 1000
Average Fitness: 2.67741e+055
Average Size:    26.308

Current Best Program:
// Fitness Information: 2.24597
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 264 ##############################
Diversity:       990 / 1000
Average Fitness: 1.65617e+051
Average Size:    26.037

Current Best Program:
// Fitness Information: 2.24597
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 265 ##############################
Diversity:       990 / 1000
Average Fitness: 6.43817e+050
Average Size:    26.264

Current Best Program:
// Fitness Information: 2.24597
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 266 ##############################
Diversity:       983 / 1000
Average Fitness: 2.85781e+055
Average Size:    26.058

Current Best Program:
// Fitness Information: 2.24597
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 267 ##############################
Diversity:       989 / 1000
Average Fitness: 5.53015e+083
Average Size:    26.606

Current Best Program:
// Fitness Information: 2.24597
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 268 ##############################
Diversity:       990 / 1000
Average Fitness: 7.89439e+053
Average Size:    27.186

Current Best Program:
// Fitness Information: 2.24597
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 269 ##############################
Diversity:       988 / 1000
Average Fitness: 2.61459e+055
Average Size:    27.708

Current Best Program:
// Fitness Information: 2.24597
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 270 ##############################
Diversity:       989 / 1000
Average Fitness: 2.69342e+055
Average Size:    27.77

Current Best Program:
// Fitness Information: 2.24597
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 271 ##############################
Diversity:       988 / 1000
Average Fitness: 1.64697e+025
Average Size:    27.613

Current Best Program:
// Fitness Information: 2.24597
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 272 ##############################
Diversity:       992 / 1000
Average Fitness: 5.24488e+025
Average Size:    27.774

Current Best Program:
// Fitness Information: 2.24597
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 273 ##############################
Diversity:       992 / 1000
Average Fitness: 2.77236e+055
Average Size:    27.022

Current Best Program:
// Fitness Information: 2.24597
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 274 ##############################
Diversity:       988 / 1000
Average Fitness: 3.97905e+054
Average Size:    26.774

Current Best Program:
// Fitness Information: 2.24597
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 275 ##############################
Diversity:       987 / 1000
Average Fitness: 1.34974e+031
Average Size:    25.578

Current Best Program:
// Fitness Information: 2.24352
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.99231 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 276 ##############################
Diversity:       988 / 1000
Average Fitness: 2.8623e+055
Average Size:    24.914

Current Best Program:
// Fitness Information: 2.24352
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	if(0.944397 < cf[0])
	r[4] = cf[0] + -0.40741;
	if(r[2] < cf[0])
	r[4] = -0.99231 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 277 ##############################
Diversity:       989 / 1000
Average Fitness: 1.59515e+026
Average Size:    24.417

Current Best Program:
// Fitness Information: 2.22228
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[3] = r[5] / 0.328796;
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	//r[0] = 0.928467 / r[2];
	r[1] = r[2] - 0.96228;
	r[4] = r[5] * r[4];
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = cf[0] + cf[0];
	if(0.944397 < cf[0])
	r[3] = -0.237549 * r[4];
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 278 ##############################
Diversity:       983 / 1000
Average Fitness: 4.57785e+055
Average Size:    24.37

Current Best Program:
// Fitness Information: 2.22228
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[3] = r[5] / 0.328796;
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	//r[0] = 0.928467 / r[2];
	r[1] = r[2] - 0.96228;
	r[4] = r[5] * r[4];
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = cf[0] + cf[0];
	if(0.944397 < cf[0])
	r[3] = -0.237549 * r[4];
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 279 ##############################
Diversity:       983 / 1000
Average Fitness: 1.26776e+026
Average Size:    24.338

Current Best Program:
// Fitness Information: 2.22228
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	r[3] = r[5] / 0.328796;
	//if(-0.309387 < cf[0])
	//r[2] = -0.646362 * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	r[4] = cf[0] / cf[0];
	r[4] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	//r[0] = 0.928467 / r[2];
	r[1] = r[2] - 0.96228;
	r[4] = r[5] * r[4];
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = cf[0] + cf[0];
	if(0.944397 < cf[0])
	r[3] = -0.237549 * r[4];
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 280 ##############################
Diversity:       991 / 1000
Average Fitness: 3.76289e+026
Average Size:    23.639

Current Best Program:
// Fitness Information: 2.19518
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 281 ##############################
Diversity:       988 / 1000
Average Fitness: 2.77502e+055
Average Size:    23.655

Current Best Program:
// Fitness Information: 2.19518
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 282 ##############################
Diversity:       988 / 1000
Average Fitness: 6.27525e+053
Average Size:    23.213

Current Best Program:
// Fitness Information: 2.19518
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 283 ##############################
Diversity:       987 / 1000
Average Fitness: 2.61453e+055
Average Size:    23.294

Current Best Program:
// Fitness Information: 2.19518
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 284 ##############################
Diversity:       989 / 1000
Average Fitness: 7.19238e+055
Average Size:    23.577

Current Best Program:
// Fitness Information: 2.19518
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 285 ##############################
Diversity:       984 / 1000
Average Fitness: 4.57785e+055
Average Size:    23.566

Current Best Program:
// Fitness Information: 2.19518
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 286 ##############################
Diversity:       983 / 1000
Average Fitness: 9.4813e+055
Average Size:    23.689

Current Best Program:
// Fitness Information: 2.19023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.223999;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 287 ##############################
Diversity:       983 / 1000
Average Fitness: 9.1557e+055
Average Size:    23.716

Current Best Program:
// Fitness Information: 2.19023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.223999;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 288 ##############################
Diversity:       982 / 1000
Average Fitness: 9.1557e+055
Average Size:    23.938

Current Best Program:
// Fitness Information: 2.19023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.223999;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 289 ##############################
Diversity:       983 / 1000
Average Fitness: 1.44764e+056
Average Size:    24.434

Current Best Program:
// Fitness Information: 2.19023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.223999;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 290 ##############################
Diversity:       983 / 1000
Average Fitness: 3.26961e+056
Average Size:    24.365

Current Best Program:
// Fitness Information: 2.19023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.223999;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 291 ##############################
Diversity:       982 / 1000
Average Fitness: 1.66485e+056
Average Size:    24.026

Current Best Program:
// Fitness Information: 2.19023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.223999;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 292 ##############################
Diversity:       986 / 1000
Average Fitness: 3.89117e+056
Average Size:    23.275

Current Best Program:
// Fitness Information: 2.19023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.223999;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 293 ##############################
Diversity:       984 / 1000
Average Fitness: 2.62467e+056
Average Size:    23.25

Current Best Program:
// Fitness Information: 2.19023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.223999;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 294 ##############################
Diversity:       993 / 1000
Average Fitness: 2.13432e+056
Average Size:    23.283

Current Best Program:
// Fitness Information: 2.19023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.223999;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 295 ##############################
Diversity:       990 / 1000
Average Fitness: 2.1245e+056
Average Size:    23.827

Current Best Program:
// Fitness Information: 2.19023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.223999;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 296 ##############################
Diversity:       993 / 1000
Average Fitness: 3.31021e+056
Average Size:    25.567

Current Best Program:
// Fitness Information: 2.19023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.223999;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 297 ##############################
Diversity:       992 / 1000
Average Fitness: 2.2906e+056
Average Size:    27.283

Current Best Program:
// Fitness Information: 2.19023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.223999;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 298 ##############################
Diversity:       993 / 1000
Average Fitness: 1.83114e+056
Average Size:    27.223

Current Best Program:
// Fitness Information: 2.19023
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	//r[3] = r[4] - -0.733154;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[5] = r[0] - cf[0];
	r[4] = cf[0] + -0.223999;
	if(r[2] < cf[0])
	r[4] = -0.88446 * cf[0];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 299 ##############################
Diversity:       990 / 1000
Average Fitness: 2.13432e+056
Average Size:    27.084

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 300 ##############################
Diversity:       990 / 1000
Average Fitness: 9.81175e+055
Average Size:    26.329

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 301 ##############################
Diversity:       995 / 1000
Average Fitness: 6.86677e+055
Average Size:    26.952

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 302 ##############################
Diversity:       995 / 1000
Average Fitness: 4.57785e+055
Average Size:    27.159

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 303 ##############################
Diversity:       988 / 1000
Average Fitness: 5.67206e+055
Average Size:    26.906

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 304 ##############################
Diversity:       994 / 1000
Average Fitness: 6.86677e+055
Average Size:    26.276

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 305 ##############################
Diversity:       994 / 1000
Average Fitness: 2.28892e+055
Average Size:    26.886

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 306 ##############################
Diversity:       992 / 1000
Average Fitness: 4.57785e+055
Average Size:    27.547

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 307 ##############################
Diversity:       992 / 1000
Average Fitness: 9.8069e+055
Average Size:    26.309

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 308 ##############################
Diversity:       993 / 1000
Average Fitness: 9.4813e+055
Average Size:    26.117

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 309 ##############################
Diversity:       993 / 1000
Average Fitness: 7.34678e+055
Average Size:    25.97

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 310 ##############################
Diversity:       990 / 1000
Average Fitness: 9.8069e+055
Average Size:    26.099

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 311 ##############################
Diversity:       989 / 1000
Average Fitness: 7.19238e+055
Average Size:    26.003

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 312 ##############################
Diversity:       989 / 1000
Average Fitness: 7.51798e+055
Average Size:    25.552

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 313 ##############################
Diversity:       987 / 1000
Average Fitness: 1.7482e+026
Average Size:    26.119

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 314 ##############################
Diversity:       988 / 1000
Average Fitness: 4.57785e+055
Average Size:    26.439

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 315 ##############################
Diversity:       988 / 1000
Average Fitness: 5.07533e+025
Average Size:    26.111

Current Best Program:
// Fitness Information: 2.18778
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[1] = r[4] * -0.287964;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.0454102;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[1] = cf[0] / cf[0];
}




############################## 316 ##############################
Diversity:       986 / 1000
Average Fitness: 2.17144e+025
Average Size:    26.283

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 317 ##############################
Diversity:       989 / 1000
Average Fitness: 2.61453e+055
Average Size:    26.241

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 318 ##############################
Diversity:       990 / 1000
Average Fitness: 1.50159e+026
Average Size:    25.386

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 319 ##############################
Diversity:       986 / 1000
Average Fitness: 693.173
Average Size:    24.837

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 320 ##############################
Diversity:       986 / 1000
Average Fitness: 2.61453e+055
Average Size:    25.109

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 321 ##############################
Diversity:       987 / 1000
Average Fitness: 2.61453e+055
Average Size:    25.245

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 322 ##############################
Diversity:       988 / 1000
Average Fitness: 1247.82
Average Size:    25.054

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 323 ##############################
Diversity:       991 / 1000
Average Fitness: 7.84358e+055
Average Size:    25.235

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 324 ##############################
Diversity:       990 / 1000
Average Fitness: 3.57774e+024
Average Size:    25.43

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 325 ##############################
Diversity:       992 / 1000
Average Fitness: 8.59608e+025
Average Size:    25.093

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 326 ##############################
Diversity:       993 / 1000
Average Fitness: 8.48572e+054
Average Size:    24.883

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 327 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    25.587

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 328 ##############################
Diversity:       992 / 1000
Average Fitness: 3.48994e+026
Average Size:    25.278

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 329 ##############################
Diversity:       987 / 1000
Average Fitness: 2.61453e+055
Average Size:    25.146

Current Best Program:
// Fitness Information: 2.16232
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[2] = r[5] / -0.307495;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.566956;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 330 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    25.202

Current Best Program:
// Fitness Information: 2.16202
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[4] = r[4] / r[5];
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.772766;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 331 ##############################
Diversity:       988 / 1000
Average Fitness: 2.9026e+026
Average Size:    25.279

Current Best Program:
// Fitness Information: 2.16202
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[4] = r[4] / r[5];
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.772766;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 332 ##############################
Diversity:       991 / 1000
Average Fitness: 7.84358e+055
Average Size:    25.133

Current Best Program:
// Fitness Information: 2.16202
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[4] = r[4] / r[5];
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.772766;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 333 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    25.178

Current Best Program:
// Fitness Information: 2.16202
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[4] = r[4] / r[5];
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.772766;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 334 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    25.527

Current Best Program:
// Fitness Information: 2.16202
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[4] = r[4] / r[5];
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.772766;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 335 ##############################
Diversity:       992 / 1000
Average Fitness: 1.08894e+026
Average Size:    24.953

Current Best Program:
// Fitness Information: 2.16202
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[4] = r[4] / r[5];
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.772766;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 336 ##############################
Diversity:       991 / 1000
Average Fitness: 8.49838e+027
Average Size:    24.427

Current Best Program:
// Fitness Information: 2.16202
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[4] = r[4] / r[5];
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.772766;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 337 ##############################
Diversity:       992 / 1000
Average Fitness: 1.55e+025
Average Size:    24.972

Current Best Program:
// Fitness Information: 2.16202
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[4] = r[4] / r[5];
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.772766;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 338 ##############################
Diversity:       991 / 1000
Average Fitness: 1.46687e+026
Average Size:    24.842

Current Best Program:
// Fitness Information: 2.16202
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[4] = r[4] / r[5];
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.772766;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 339 ##############################
Diversity:       994 / 1000
Average Fitness: 1.53829e+025
Average Size:    25.171

Current Best Program:
// Fitness Information: 2.16202
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = r[5] / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / 0.403687;
	//r[4] = r[4] / r[5];
	//r[1] = cf[0] / 0.401978;
	//r[4] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.772766;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - -0.636047;
}




############################## 340 ##############################
Diversity:       996 / 1000
Average Fitness: 5.22905e+055
Average Size:    24.46

Current Best Program:
// Fitness Information: 2.16066
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[5] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * r[5];
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 341 ##############################
Diversity:       995 / 1000
Average Fitness: 5.22905e+055
Average Size:    24.418

Current Best Program:
// Fitness Information: 2.16066
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[5] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * r[5];
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 342 ##############################
Diversity:       989 / 1000
Average Fitness: 2.61453e+055
Average Size:    24.535

Current Best Program:
// Fitness Information: 2.16066
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[5] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * r[5];
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 343 ##############################
Diversity:       990 / 1000
Average Fitness: 1.36388e+025
Average Size:    24.119

Current Best Program:
// Fitness Information: 2.16066
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[5] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * r[5];
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 344 ##############################
Diversity:       992 / 1000
Average Fitness: 2.61453e+055
Average Size:    24.025

Current Best Program:
// Fitness Information: 2.16066
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[5] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * r[5];
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 345 ##############################
Diversity:       992 / 1000
Average Fitness: 5.22905e+055
Average Size:    24.348

Current Best Program:
// Fitness Information: 2.16066
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[5] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * r[5];
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 346 ##############################
Diversity:       991 / 1000
Average Fitness: 2.05088e+026
Average Size:    24.326

Current Best Program:
// Fitness Information: 2.16066
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[5] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * r[5];
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 347 ##############################
Diversity:       992 / 1000
Average Fitness: 1.41895e+026
Average Size:    23.713

Current Best Program:
// Fitness Information: 2.16066
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[5] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * r[5];
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.96228;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = r[4] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 348 ##############################
Diversity:       993 / 1000
Average Fitness: 7.97735e+025
Average Size:    23.425

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 349 ##############################
Diversity:       994 / 1000
Average Fitness: 685.276
Average Size:    23.23

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 350 ##############################
Diversity:       993 / 1000
Average Fitness: 2.61453e+055
Average Size:    23.51

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 351 ##############################
Diversity:       998 / 1000
Average Fitness: 3.01072e+026
Average Size:    24.293

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 352 ##############################
Diversity:       998 / 1000
Average Fitness: 8.59608e+025
Average Size:    24.581

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 353 ##############################
Diversity:       994 / 1000
Average Fitness: 2.61453e+055
Average Size:    25.147

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 354 ##############################
Diversity:       996 / 1000
Average Fitness: 5.11837e+025
Average Size:    25.5

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 355 ##############################
Diversity:       997 / 1000
Average Fitness: 2.61453e+055
Average Size:    25.63

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 356 ##############################
Diversity:       998 / 1000
Average Fitness: 3.72963e+026
Average Size:    25.528

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 357 ##############################
Diversity:       995 / 1000
Average Fitness: 2.61453e+055
Average Size:    26.149

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 358 ##############################
Diversity:       998 / 1000
Average Fitness: 1.48406e+054
Average Size:    25.901

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 359 ##############################
Diversity:       996 / 1000
Average Fitness: 2.61453e+055
Average Size:    26.291

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 360 ##############################
Diversity:       995 / 1000
Average Fitness: 5.22905e+055
Average Size:    26.713

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 361 ##############################
Diversity:       994 / 1000
Average Fitness: 2.61453e+055
Average Size:    26.749

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 362 ##############################
Diversity:       994 / 1000
Average Fitness: 8.60423e+025
Average Size:    26.908

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 363 ##############################
Diversity:       993 / 1000
Average Fitness: 2.61453e+055
Average Size:    26.681

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 364 ##############################
Diversity:       992 / 1000
Average Fitness: 1.75515e+027
Average Size:    26.357

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 365 ##############################
Diversity:       992 / 1000
Average Fitness: 2.61453e+055
Average Size:    26.854

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 366 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    26.905

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 367 ##############################
Diversity:       993 / 1000
Average Fitness: 5.22905e+055
Average Size:    26.893

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 368 ##############################
Diversity:       994 / 1000
Average Fitness: 5.2699e+024
Average Size:    26.975

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 369 ##############################
Diversity:       992 / 1000
Average Fitness: 2.61453e+055
Average Size:    26.553

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 370 ##############################
Diversity:       990 / 1000
Average Fitness: 2.67536e+055
Average Size:    26.911

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 371 ##############################
Diversity:       993 / 1000
Average Fitness: 2.61453e+055
Average Size:    27.013

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 372 ##############################
Diversity:       993 / 1000
Average Fitness: 5.22905e+055
Average Size:    26.822

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 373 ##############################
Diversity:       990 / 1000
Average Fitness: 5.89872e+022
Average Size:    27.181

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 374 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    26.95

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 375 ##############################
Diversity:       992 / 1000
Average Fitness: 2.02298e+055
Average Size:    28.195

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 376 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    27.828

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 377 ##############################
Diversity:       989 / 1000
Average Fitness: 8.05401e+025
Average Size:    28.159

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 378 ##############################
Diversity:       990 / 1000
Average Fitness: 6.02219e+024
Average Size:    27.884

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 379 ##############################
Diversity:       988 / 1000
Average Fitness: 2.23392e+025
Average Size:    28.399

Current Best Program:
// Fitness Information: 2.1511
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / 0.401978;
	//r[4] = r[4] / r[5];
	//r[4] = cf[0] / 0.403687;
	//r[1] = cf[0] / 0.401978;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 380 ##############################
Diversity:       989 / 1000
Average Fitness: 1.32385e+026
Average Size:    28.151

Current Best Program:
// Fitness Information: 2.15065
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[1] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / r[1];
	//r[4] = r[4] / r[5];
	//r[3] = r[2] * 0.51416;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 381 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    28.923

Current Best Program:
// Fitness Information: 2.15065
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[1] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / r[1];
	//r[4] = r[4] / r[5];
	//r[3] = r[2] * 0.51416;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 382 ##############################
Diversity:       991 / 1000
Average Fitness: 5.22905e+055
Average Size:    29.382

Current Best Program:
// Fitness Information: 2.15065
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[1] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[4] = cf[0] / cf[0];
	//r[1] = cf[0] / r[1];
	//r[4] = r[4] / r[5];
	//r[3] = r[2] * 0.51416;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 383 ##############################
Diversity:       990 / 1000
Average Fitness: 3.33534e+025
Average Size:    29.861

Current Best Program:
// Fitness Information: 2.14601
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[2] = -0.255493 * r[1];
	//r[4] = cf[0] / r[5];
	r[0] = -0.895386 * -0.0553589;
	//r[3] = r[1] + 0.0719604;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < 0.876282)
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 384 ##############################
Diversity:       992 / 1000
Average Fitness: 8.32094e+023
Average Size:    29.789

Current Best Program:
// Fitness Information: 2.14601
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[2] = -0.255493 * r[1];
	//r[4] = cf[0] / r[5];
	r[0] = -0.895386 * -0.0553589;
	//r[3] = r[1] + 0.0719604;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < 0.876282)
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 385 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    29.996

Current Best Program:
// Fitness Information: 2.14601
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[2] = -0.255493 * r[1];
	//r[4] = cf[0] / r[5];
	r[0] = -0.895386 * -0.0553589;
	//r[3] = r[1] + 0.0719604;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < 0.876282)
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 386 ##############################
Diversity:       993 / 1000
Average Fitness: 5.22905e+055
Average Size:    29.502

Current Best Program:
// Fitness Information: 2.14601
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[2] = -0.255493 * r[1];
	//r[4] = cf[0] / r[5];
	r[0] = -0.895386 * -0.0553589;
	//r[3] = r[1] + 0.0719604;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < 0.876282)
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 387 ##############################
Diversity:       988 / 1000
Average Fitness: 5.11392e+024
Average Size:    29.753

Current Best Program:
// Fitness Information: 2.14601
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = r[2] / cf[0];
	//r[3] = -0.151367 / -0.772766;
	//r[2] = cf[0] * -0.0103149;
	//r[2] = -0.255493 * r[1];
	//r[4] = cf[0] / r[5];
	r[0] = -0.895386 * -0.0553589;
	//r[3] = r[1] + 0.0719604;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < 0.876282)
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 388 ##############################
Diversity:       992 / 1000
Average Fitness: 6.23089e+025
Average Size:    29.038

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 389 ##############################
Diversity:       992 / 1000
Average Fitness: 7.2455e+026
Average Size:    28.885

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 390 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    28.465

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 391 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    28.661

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 392 ##############################
Diversity:       992 / 1000
Average Fitness: 5.22905e+055
Average Size:    28.404

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 393 ##############################
Diversity:       990 / 1000
Average Fitness: 5.22905e+055
Average Size:    29.459

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 394 ##############################
Diversity:       989 / 1000
Average Fitness: 5.90271e+024
Average Size:    29.57

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 395 ##############################
Diversity:       994 / 1000
Average Fitness: 3.11355e+026
Average Size:    31.375

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 396 ##############################
Diversity:       996 / 1000
Average Fitness: 1.56386e+023
Average Size:    33.778

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 397 ##############################
Diversity:       994 / 1000
Average Fitness: 1.69016e+026
Average Size:    36.202

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 398 ##############################
Diversity:       994 / 1000
Average Fitness: 1.29576e+025
Average Size:    38.287

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 399 ##############################
Diversity:       992 / 1000
Average Fitness: 1.45983e+026
Average Size:    40.763

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 400 ##############################
Diversity:       994 / 1000
Average Fitness: 1.0078e+026
Average Size:    42.458

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 401 ##############################
Diversity:       993 / 1000
Average Fitness: 1.63471e+026
Average Size:    43.269

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 402 ##############################
Diversity:       990 / 1000
Average Fitness: 2.93509e+024
Average Size:    44.669

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 403 ##############################
Diversity:       994 / 1000
Average Fitness: 5.87018e+024
Average Size:    44.85

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 404 ##############################
Diversity:       994 / 1000
Average Fitness: 8.78612e+025
Average Size:    45.41

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 405 ##############################
Diversity:       993 / 1000
Average Fitness: 1.41796e+026
Average Size:    45.675

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 406 ##############################
Diversity:       993 / 1000
Average Fitness: 8.80528e+024
Average Size:    46.202

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 407 ##############################
Diversity:       992 / 1000
Average Fitness: 2.61453e+055
Average Size:    46.355

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 408 ##############################
Diversity:       992 / 1000
Average Fitness: 3.01001e+025
Average Size:    46.976

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 409 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    46.546

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 410 ##############################
Diversity:       994 / 1000
Average Fitness: 2.61453e+055
Average Size:    47.131

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 411 ##############################
Diversity:       992 / 1000
Average Fitness: 6.39463e+024
Average Size:    47.252

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 412 ##############################
Diversity:       996 / 1000
Average Fitness: 6.54573e+024
Average Size:    46.624

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 413 ##############################
Diversity:       996 / 1000
Average Fitness: 1.01096e+026
Average Size:    46.537

Current Best Program:
// Fitness Information: 2.14227
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[4] = cf[0] - 0.205322;
	//r[2] = r[5] + cf[0];
	//if(-0.255493 < r[1])
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[4] * r[5];
	r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < r[1])
	//if(0.976379 < -0.534546)
	//r[0] = r[0] + cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 414 ##############################
Diversity:       994 / 1000
Average Fitness: 3.70923e+024
Average Size:    46.997

Current Best Program:
// Fitness Information: 2.14182
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//if(0.0143433 < -0.295105)
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//r[0] = -0.332825 * cf[0];
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 + -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[2] = cf[0] - cf[0];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 415 ##############################
Diversity:       993 / 1000
Average Fitness: 2.34957e+025
Average Size:    47.153

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 416 ##############################
Diversity:       994 / 1000
Average Fitness: 9.64227e+024
Average Size:    47.879

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 417 ##############################
Diversity:       993 / 1000
Average Fitness: 9.31511e+025
Average Size:    48.16

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 418 ##############################
Diversity:       993 / 1000
Average Fitness: 3.56065e+025
Average Size:    49.328

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 419 ##############################
Diversity:       999 / 1000
Average Fitness: 5.22905e+055
Average Size:    50.518

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 420 ##############################
Diversity:       996 / 1000
Average Fitness: 5.99541e+026
Average Size:    52.409

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 421 ##############################
Diversity:       990 / 1000
Average Fitness: 8.91548e+025
Average Size:    55.367

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 422 ##############################
Diversity:       993 / 1000
Average Fitness: 2.16261e+026
Average Size:    59.812

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 423 ##############################
Diversity:       993 / 1000
Average Fitness: 9.0094e+025
Average Size:    63.722

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 424 ##############################
Diversity:       993 / 1000
Average Fitness: 5.48964e+025
Average Size:    65.673

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 425 ##############################
Diversity:       993 / 1000
Average Fitness: 2.61453e+055
Average Size:    67.541

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 426 ##############################
Diversity:       991 / 1000
Average Fitness: 4.40264e+024
Average Size:    68.502

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 427 ##############################
Diversity:       992 / 1000
Average Fitness: 2.61453e+055
Average Size:    69.712

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 428 ##############################
Diversity:       993 / 1000
Average Fitness: 2.1732e+026
Average Size:    70.837

Current Best Program:
// Fitness Information: 2.14158
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//if(r[2] < r[1])
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[4] < -0.677124)
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//if(cf[0] < r[3])
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 429 ##############################
Diversity:       993 / 1000
Average Fitness: 8.61596e+025
Average Size:    72.261

Current Best Program:
// Fitness Information: 1.72376
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.596069 + r[5];
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//r[2] = r[0] + cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 430 ##############################
Diversity:       995 / 1000
Average Fitness: 5.87018e+024
Average Size:    74.704

Current Best Program:
// Fitness Information: 1.72376
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.596069 + r[5];
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//r[2] = r[0] + cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 431 ##############################
Diversity:       994 / 1000
Average Fitness: 5.31217e+055
Average Size:    74.512

Current Best Program:
// Fitness Information: 1.72376
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.596069 + r[5];
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//r[2] = r[0] + cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 432 ##############################
Diversity:       993 / 1000
Average Fitness: 5.98457e+024
Average Size:    75.306

Current Best Program:
// Fitness Information: 1.72376
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.596069 + r[5];
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//r[2] = r[0] + cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 433 ##############################
Diversity:       995 / 1000
Average Fitness: 7.81485e+025
Average Size:    74.457

Current Best Program:
// Fitness Information: 1.72376
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.596069 + r[5];
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//r[2] = r[0] + cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 434 ##############################
Diversity:       992 / 1000
Average Fitness: 4.40264e+024
Average Size:    74.342

Current Best Program:
// Fitness Information: 1.72376
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.596069 + r[5];
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//r[2] = r[0] + cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 435 ##############################
Diversity:       993 / 1000
Average Fitness: 5.87018e+024
Average Size:    74.37

Current Best Program:
// Fitness Information: 1.72376
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.596069 + r[5];
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//r[2] = r[0] + cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 436 ##############################
Diversity:       990 / 1000
Average Fitness: 8.80528e+024
Average Size:    75.317

Current Best Program:
// Fitness Information: 1.72376
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.596069 + r[5];
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//r[2] = r[0] + cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 437 ##############################
Diversity:       993 / 1000
Average Fitness: 1.05736e+025
Average Size:    74.825

Current Best Program:
// Fitness Information: 1.72376
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.596069 + r[5];
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//r[2] = r[0] + cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 438 ##############################
Diversity:       987 / 1000
Average Fitness: 1.17404e+025
Average Size:    73.444

Current Best Program:
// Fitness Information: 1.72376
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.596069 + r[5];
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//r[2] = r[0] + cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 439 ##############################
Diversity:       992 / 1000
Average Fitness: 5.87018e+024
Average Size:    74.329

Current Best Program:
// Fitness Information: 1.72376
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.596069 + r[5];
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//r[2] = r[0] + cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 440 ##############################
Diversity:       993 / 1000
Average Fitness: 1.17069e+055
Average Size:    73.504

Current Best Program:
// Fitness Information: 1.72376
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//if(r[2] < r[1])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.596069 + r[5];
	//r[4] = -0.460083 + -0.13739;
	//r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//r[2] = r[0] + cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = r[1] / cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < cf[0])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 441 ##############################
Diversity:       992 / 1000
Average Fitness: 8.80528e+024
Average Size:    71.863

Current Best Program:
// Fitness Information: 1.64214
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	if(-0.332825 < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	r[5] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 442 ##############################
Diversity:       991 / 1000
Average Fitness: 1.02728e+025
Average Size:    72.027

Current Best Program:
// Fitness Information: 1.64214
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	if(-0.332825 < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	r[5] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 443 ##############################
Diversity:       994 / 1000
Average Fitness: 2.08304e+025
Average Size:    70.644

Current Best Program:
// Fitness Information: 1.62361
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	r[2] = cf[0] / cf[0];
	r[2] = r[1] * r[2];
	if(cf[0] < -0.791748)
	r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	if(r[1] < 0.0737305)
	r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[2] = r[5] + cf[0];
	r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	if(r[1] < 0.0737305)
	r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	r[2] = cf[0] - -0.803223;
	r[2] = r[1] * r[2];
	r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[2] = r[0] + cf[0];
	//r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[3] = cf[0] - r[4];
	r[4] = -0.460083 + -0.13739;
	//r[0] = 0.596069 + r[5];
	//r[3] = -0.151367 / -0.640259;
	if(r[2] < r[1])
	if(-0.332825 < cf[0])
	r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[2] = r[3] * cf[0];
	//if(r[3] < r[1])
	//r[0] = cf[0] - r[2];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 444 ##############################
Diversity:       993 / 1000
Average Fitness: 1.25263e+025
Average Size:    70.666

Current Best Program:
// Fitness Information: 1.62361
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	r[2] = cf[0] / cf[0];
	r[2] = r[1] * r[2];
	if(cf[0] < -0.791748)
	r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	if(r[1] < 0.0737305)
	r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	r[2] = r[5] + cf[0];
	r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	if(r[1] < 0.0737305)
	r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	r[2] = cf[0] - -0.803223;
	r[2] = r[1] * r[2];
	r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[2] = r[0] + cf[0];
	//r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[3] = cf[0] - r[4];
	r[4] = -0.460083 + -0.13739;
	//r[0] = 0.596069 + r[5];
	//r[3] = -0.151367 / -0.640259;
	if(r[2] < r[1])
	if(-0.332825 < cf[0])
	r[4] = cf[0] - r[4];
	//r[2] = r[5] + cf[0];
	//r[2] = r[3] * cf[0];
	//if(r[3] < r[1])
	//r[0] = cf[0] - r[2];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 445 ##############################
Diversity:       995 / 1000
Average Fitness: 7.33773e+024
Average Size:    70.348

Current Best Program:
// Fitness Information: 1.15669
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] - r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//r[0] = r[2] - cf[0];
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = 0.366394 * cf[0];
	//r[3] = 0.994507 * cf[0];
	r[5] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 446 ##############################
Diversity:       990 / 1000
Average Fitness: 8.80528e+024
Average Size:    70.825

Current Best Program:
// Fitness Information: 1.15669
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] - r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//r[0] = r[2] - cf[0];
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = 0.366394 * cf[0];
	//r[3] = 0.994507 * cf[0];
	r[5] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 447 ##############################
Diversity:       995 / 1000
Average Fitness: 2.61453e+055
Average Size:    70.636

Current Best Program:
// Fitness Information: 1.15669
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] - r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//r[0] = r[2] - cf[0];
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = 0.366394 * cf[0];
	//r[3] = 0.994507 * cf[0];
	r[5] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 448 ##############################
Diversity:       994 / 1000
Average Fitness: 2.61453e+055
Average Size:    70.198

Current Best Program:
// Fitness Information: 1.15669
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] - r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//r[0] = r[2] - cf[0];
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = 0.366394 * cf[0];
	//r[3] = 0.994507 * cf[0];
	r[5] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 449 ##############################
Diversity:       996 / 1000
Average Fitness: 1.06795e+054
Average Size:    68.931

Current Best Program:
// Fitness Information: 1.15669
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] - r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//r[0] = r[2] - cf[0];
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = 0.366394 * cf[0];
	//r[3] = 0.994507 * cf[0];
	r[5] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 450 ##############################
Diversity:       995 / 1000
Average Fitness: 5.44116e+026
Average Size:    67.458

Current Best Program:
// Fitness Information: 1.1139
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = cf[0] + r[4];
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//r[4] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	r[4] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	r[5] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[2] = -0.0107422 + r[5];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 451 ##############################
Diversity:       995 / 1000
Average Fitness: 5.27755e+054
Average Size:    69.25

Current Best Program:
// Fitness Information: 1.1139
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[0] = cf[0] + r[4];
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//r[4] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	r[4] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	r[5] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[2] = -0.0107422 + r[5];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 452 ##############################
Diversity:       995 / 1000
Average Fitness: 2.72132e+055
Average Size:    71.289

Current Best Program:
// Fitness Information: 1.09892
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 + -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	r[4] = cf[0] * cf[0];
	//r[2] = r[1] - r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = r[1] / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	if(-0.332825 < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = 0.366394 * cf[0];
	//r[3] = 0.994507 * cf[0];
	//r[2] = cf[0] - cf[0];
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.970398 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 453 ##############################
Diversity:       993 / 1000
Average Fitness: 6.56982e+025
Average Size:    73.212

Current Best Program:
// Fitness Information: 1.08458
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//if(0.479309 < cf[0])
	//r[2] = r[1] * r[2];
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	if(-0.332825 < r[1])
	r[4] = -0.88446 * r[4];
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * 0.367065;
	//r[3] = 0.994507 * cf[0];
	//r[1] = r[5] / r[5];
	r[4] = r[4] * r[5];
	//r[2] = -0.0107422 + r[5];
	//r[1] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[2] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[3] = cf[0] - r[3];
}




############################## 454 ##############################
Diversity:       994 / 1000
Average Fitness: 2.72018e+025
Average Size:    72.189

Current Best Program:
// Fitness Information: 1.08319
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] - r[2];
	//r[3] = cf[0] - -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + 0.499634;
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//r[4] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	r[1] = 0.366394 * cf[0];
	//r[3] = 0.994507 * cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[3] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	r[4] = cf[0] / r[1];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[1] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//if(r[0] < cf[0])
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 455 ##############################
Diversity:       993 / 1000
Average Fitness: 5.33973e+053
Average Size:    71.328

Current Best Program:
// Fitness Information: 1.08319
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] - r[2];
	//r[3] = cf[0] - -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + 0.499634;
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//r[4] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	r[1] = 0.366394 * cf[0];
	//r[3] = 0.994507 * cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[3] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	r[4] = cf[0] / r[1];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[1] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//if(r[0] < cf[0])
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 456 ##############################
Diversity:       995 / 1000
Average Fitness: 4.17711e+053
Average Size:    70.823

Current Best Program:
// Fitness Information: 1.08319
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] - r[2];
	//r[3] = cf[0] - -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + 0.499634;
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//r[4] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	r[1] = 0.366394 * cf[0];
	//r[3] = 0.994507 * cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[3] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	r[4] = cf[0] / r[1];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[1] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//if(r[0] < cf[0])
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 457 ##############################
Diversity:       996 / 1000
Average Fitness: 2.61453e+055
Average Size:    71.347

Current Best Program:
// Fitness Information: 1.08319
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//r[2] = r[1] - r[2];
	//r[3] = cf[0] - -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + 0.499634;
	//r[4] = cf[0] - r[4];
	//if(-0.332825 < cf[0])
	//r[4] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	r[1] = 0.366394 * cf[0];
	//r[3] = 0.994507 * cf[0];
	//r[5] = cf[0] * 0.851379;
	//r[4] = r[4] * r[5];
	//r[3] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	r[4] = cf[0] / r[1];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[1] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//if(r[0] < cf[0])
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 458 ##############################
Diversity:       992 / 1000
Average Fitness: 1.32079e+025
Average Size:    74.299

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 459 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    77.092

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 460 ##############################
Diversity:       987 / 1000
Average Fitness: 2.50796e+054
Average Size:    82.111

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 461 ##############################
Diversity:       991 / 1000
Average Fitness: 7.7372e+025
Average Size:    84.374

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 462 ##############################
Diversity:       993 / 1000
Average Fitness: 1.25263e+025
Average Size:    86.015

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 463 ##############################
Diversity:       994 / 1000
Average Fitness: 2.61453e+055
Average Size:    84.755

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 464 ##############################
Diversity:       991 / 1000
Average Fitness: 8.55475e+025
Average Size:    80.841

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 465 ##############################
Diversity:       994 / 1000
Average Fitness: 1.99601e+025
Average Size:    78.72

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 466 ##############################
Diversity:       996 / 1000
Average Fitness: 7.33773e+024
Average Size:    77.553

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 467 ##############################
Diversity:       990 / 1000
Average Fitness: 4.90104e+055
Average Size:    77.861

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 468 ##############################
Diversity:       990 / 1000
Average Fitness: 5.34708e+025
Average Size:    79.71

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 469 ##############################
Diversity:       991 / 1000
Average Fitness: 1.46755e+024
Average Size:    85.063

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 470 ##############################
Diversity:       992 / 1000
Average Fitness: 1.18682e+025
Average Size:    90.801

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 471 ##############################
Diversity:       991 / 1000
Average Fitness: 6.69389e+025
Average Size:    97.601

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 472 ##############################
Diversity:       990 / 1000
Average Fitness: 8.80528e+024
Average Size:    102.809

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 473 ##############################
Diversity:       991 / 1000
Average Fitness: 8.12369e+024
Average Size:    105.669

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 474 ##############################
Diversity:       990 / 1000
Average Fitness: 4.40264e+024
Average Size:    108.708

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 475 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    109.411

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 476 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    111.672

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 477 ##############################
Diversity:       991 / 1000
Average Fitness: 4.40264e+024
Average Size:    111.736

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 478 ##############################
Diversity:       994 / 1000
Average Fitness: 5.87018e+024
Average Size:    113.037

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 479 ##############################
Diversity:       994 / 1000
Average Fitness: 1.17404e+025
Average Size:    114.686

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 480 ##############################
Diversity:       993 / 1000
Average Fitness: 9.20083e+025
Average Size:    114.651

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 481 ##############################
Diversity:       991 / 1000
Average Fitness: 1.17404e+025
Average Size:    115.35

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 482 ##############################
Diversity:       991 / 1000
Average Fitness: 8.80528e+024
Average Size:    116.905

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 483 ##############################
Diversity:       993 / 1000
Average Fitness: 1.26318e+025
Average Size:    117.588

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 484 ##############################
Diversity:       993 / 1000
Average Fitness: 4.40264e+024
Average Size:    116.189

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 485 ##############################
Diversity:       992 / 1000
Average Fitness: 1.26913e+025
Average Size:    114.99

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 486 ##############################
Diversity:       992 / 1000
Average Fitness: 1.17404e+025
Average Size:    114.656

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 487 ##############################
Diversity:       993 / 1000
Average Fitness: 2.62056e+055
Average Size:    112.903

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 488 ##############################
Diversity:       991 / 1000
Average Fitness: 6.72541e+025
Average Size:    114.073

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 489 ##############################
Diversity:       990 / 1000
Average Fitness: 4.40264e+024
Average Size:    115.747

Current Best Program:
// Fitness Information: 1.08142
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[1] < r[1])
	//r[3] = cf[0] * -0.710938;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//if(r[3] < r[1])
	//r[0] = -0.255493 * r[1];
	//r[2] = r[5] + cf[0];
	r[4] = cf[0] - r[4];
	//if(-0.332825 < r[1])
	//r[0] = -0.88446 * r[4];
	//if(r[2] < cf[0])
	//r[3] = cf[0] * cf[0];
	//if(-0.171143 < cf[0])
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = cf[0] * 0.851379;
	r[4] = r[4] * r[5];
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.733643 / r[4];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = 0.926086 + r[1];
	//r[3] = -0.902344 - cf[0];
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 490 ##############################
Diversity:       992 / 1000
Average Fitness: 9.00652e+024
Average Size:    116.411

Current Best Program:
// Fitness Information: 1.07987
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 491 ##############################
Diversity:       993 / 1000
Average Fitness: 5.22905e+055
Average Size:    115.042

Current Best Program:
// Fitness Information: 1.07987
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 492 ##############################
Diversity:       993 / 1000
Average Fitness: 1.32079e+025
Average Size:    114.425

Current Best Program:
// Fitness Information: 1.07987
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 493 ##############################
Diversity:       990 / 1000
Average Fitness: 8.80528e+024
Average Size:    114.013

Current Best Program:
// Fitness Information: 1.07987
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 494 ##############################
Diversity:       991 / 1000
Average Fitness: 1.02728e+025
Average Size:    113.289

Current Best Program:
// Fitness Information: 1.07987
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 495 ##############################
Diversity:       993 / 1000
Average Fitness: 2.61453e+055
Average Size:    115.201

Current Best Program:
// Fitness Information: 1.07987
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 496 ##############################
Diversity:       992 / 1000
Average Fitness: 2.61453e+055
Average Size:    115.493

Current Best Program:
// Fitness Information: 1.07987
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 497 ##############################
Diversity:       992 / 1000
Average Fitness: 2.648e+026
Average Size:    114.233

Current Best Program:
// Fitness Information: 1.07987
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = cf[0] / cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 498 ##############################
Diversity:       992 / 1000
Average Fitness: 1.50019e+025
Average Size:    114.191

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 499 ##############################
Diversity:       994 / 1000
Average Fitness: 1.32079e+025
Average Size:    116.729

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 500 ##############################
Diversity:       997 / 1000
Average Fitness: 1.46765e+025
Average Size:    118.915

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 501 ##############################
Diversity:       996 / 1000
Average Fitness: 2.61453e+055
Average Size:    123.08

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 502 ##############################
Diversity:       999 / 1000
Average Fitness: 2.93509e+024
Average Size:    125.137

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 503 ##############################
Diversity:       998 / 1000
Average Fitness: 2.93509e+024
Average Size:    126.688

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 504 ##############################
Diversity:       997 / 1000
Average Fitness: 3.27441e+024
Average Size:    127.933

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 505 ##############################
Diversity:       996 / 1000
Average Fitness: 4.40264e+024
Average Size:    126.224

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 506 ##############################
Diversity:       994 / 1000
Average Fitness: 8.46706e+025
Average Size:    127.56

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 507 ##############################
Diversity:       995 / 1000
Average Fitness: 5.38957e+026
Average Size:    128.493

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 508 ##############################
Diversity:       995 / 1000
Average Fitness: 9.64227e+024
Average Size:    129.31

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 509 ##############################
Diversity:       996 / 1000
Average Fitness: 8.61382e+025
Average Size:    130.771

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 510 ##############################
Diversity:       996 / 1000
Average Fitness: 5.38457e+025
Average Size:    131.434

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 511 ##############################
Diversity:       993 / 1000
Average Fitness: 1.46755e+024
Average Size:    132.146

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 512 ##############################
Diversity:       996 / 1000
Average Fitness: 8.32031e+025
Average Size:    132.846

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 513 ##############################
Diversity:       995 / 1000
Average Fitness: 9.13778e+025
Average Size:    132.718

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 514 ##############################
Diversity:       995 / 1000
Average Fitness: 8290.69
Average Size:    133.783

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 515 ##############################
Diversity:       997 / 1000
Average Fitness: 5.87018e+024
Average Size:    132.097

Current Best Program:
// Fitness Information: 1.07865
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 516 ##############################
Diversity:       994 / 1000
Average Fitness: 2.61453e+055
Average Size:    131.223

Current Best Program:
// Fitness Information: 1.06721
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 * r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//r[2] = -0.227051 * r[2];
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[5] = cf[0] + r[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[2] = r[5] / r[5];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[5] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	//if(r[3] < r[1])
	//if(0.377991 < cf[0])
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[2] = -0.74353 / 0.444519;
	r[1] = r[1] / 0.929016;
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	if(cf[0] < -0.13739)
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 517 ##############################
Diversity:       994 / 1000
Average Fitness: 4.40264e+024
Average Size:    131.331

Current Best Program:
// Fitness Information: 1.05992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[0] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 518 ##############################
Diversity:       994 / 1000
Average Fitness: 6.70718e+024
Average Size:    130.517

Current Best Program:
// Fitness Information: 1.05992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[0] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 519 ##############################
Diversity:       996 / 1000
Average Fitness: 8.17472e+024
Average Size:    129.879

Current Best Program:
// Fitness Information: 1.05992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[0] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 520 ##############################
Diversity:       997 / 1000
Average Fitness: 4.40264e+024
Average Size:    130.679

Current Best Program:
// Fitness Information: 1.05992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[0] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 521 ##############################
Diversity:       996 / 1000
Average Fitness: 8.61382e+025
Average Size:    131.987

Current Best Program:
// Fitness Information: 1.05992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[0] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 522 ##############################
Diversity:       996 / 1000
Average Fitness: 7.33773e+024
Average Size:    130.706

Current Best Program:
// Fitness Information: 1.05992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[0] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 523 ##############################
Diversity:       997 / 1000
Average Fitness: 4.40264e+024
Average Size:    131.9

Current Best Program:
// Fitness Information: 1.05992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[0] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 524 ##############################
Diversity:       995 / 1000
Average Fitness: 2.93509e+024
Average Size:    130.375

Current Best Program:
// Fitness Information: 1.05992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[0] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 525 ##############################
Diversity:       999 / 1000
Average Fitness: 8.82502e+025
Average Size:    128.173

Current Best Program:
// Fitness Information: 1.05992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[0] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 526 ##############################
Diversity:       998 / 1000
Average Fitness: 4.8592e+024
Average Size:    128.295

Current Best Program:
// Fitness Information: 1.05992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[0] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 527 ##############################
Diversity:       995 / 1000
Average Fitness: 3.55118e+025
Average Size:    130.407

Current Best Program:
// Fitness Information: 1.05992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[0] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 528 ##############################
Diversity:       995 / 1000
Average Fitness: 2.6738e+026
Average Size:    129.636

Current Best Program:
// Fitness Information: 1.05992
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - cf[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[0] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 529 ##############################
Diversity:       995 / 1000
Average Fitness: 5.89652e+024
Average Size:    130.831

Current Best Program:
// Fitness Information: 1.05412
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 530 ##############################
Diversity:       996 / 1000
Average Fitness: 3.11637e+024
Average Size:    129.005

Current Best Program:
// Fitness Information: 1.05412
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 531 ##############################
Diversity:       995 / 1000
Average Fitness: 4.75924e+055
Average Size:    128.75

Current Best Program:
// Fitness Information: 1.05412
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(r[3] < r[1])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 532 ##############################
Diversity:       996 / 1000
Average Fitness: 4.28943e+055
Average Size:    128.77

Current Best Program:
// Fitness Information: 1.04488
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 533 ##############################
Diversity:       993 / 1000
Average Fitness: 6.13438e+084
Average Size:    130.187

Current Best Program:
// Fitness Information: 1.04488
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 534 ##############################
Diversity:       995 / 1000
Average Fitness: 7.33773e+024
Average Size:    129.161

Current Best Program:
// Fitness Information: 1.04488
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 535 ##############################
Diversity:       992 / 1000
Average Fitness: 4.40264e+024
Average Size:    132.329

Current Best Program:
// Fitness Information: 1.04488
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 536 ##############################
Diversity:       990 / 1000
Average Fitness: 2.14471e+055
Average Size:    132.195

Current Best Program:
// Fitness Information: 1.04488
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 537 ##############################
Diversity:       991 / 1000
Average Fitness: 2.94282e+025
Average Size:    130.877

Current Best Program:
// Fitness Information: 1.04488
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 538 ##############################
Diversity:       992 / 1000
Average Fitness: 4.8592e+024
Average Size:    131.485

Current Best Program:
// Fitness Information: 1.04488
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 539 ##############################
Diversity:       988 / 1000
Average Fitness: 5.87018e+024
Average Size:    130.46

Current Best Program:
// Fitness Information: 1.04488
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 540 ##############################
Diversity:       996 / 1000
Average Fitness: 5.87018e+024
Average Size:    130.749

Current Best Program:
// Fitness Information: 1.04488
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 541 ##############################
Diversity:       994 / 1000
Average Fitness: 2.61453e+055
Average Size:    130.082

Current Best Program:
// Fitness Information: 1.04488
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 542 ##############################
Diversity:       994 / 1000
Average Fitness: 1.32079e+025
Average Size:    129.634

Current Best Program:
// Fitness Information: 1.04488
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - -0.803223;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - r[3];
	//r[2] = -0.680969 * r[5];
	r[4] = r[4] * r[5];
	//r[5] = cf[0] * 0.569702;
	//r[3] = r[1] / cf[0];
	//if(-0.799011 < r[4])
	//r[2] = r[1] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.99231 - r[2];
	//r[3] = r[3] - r[1];
	//r[5] = -0.68512 * -0.230652;
	//r[2] = r[5] + cf[0];
	//r[3] = cf[0] + r[2];
	//r[1] = r[2] - 0.929871;
	//if(r[2] < cf[0])
	//r[1] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//r[3] = 0.227783 + r[3];
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[2] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = r[4] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[0] = -0.38562 * r[4];
	//r[3] = 0.994507 * cf[0];
	//r[3] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	//r[0] = 0.125732 / cf[0];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - -0.803223;
	r[0] = -0.38562 * -0.0687866;
	//r[3] = 0.625977 * -0.8526;
	r[5] = cf[0] * 0.569702;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	r[2] = cf[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 543 ##############################
Diversity:       994 / 1000
Average Fitness: 9.82495e+025
Average Size:    129.73

Current Best Program:
// Fitness Information: 1.04121
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[3] = cf[0] + r[2];
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = r[1] - -0.803223;
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 544 ##############################
Diversity:       995 / 1000
Average Fitness: 4.79261e+055
Average Size:    129.88

Current Best Program:
// Fitness Information: 1.04121
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[3] = cf[0] + r[2];
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = r[1] - -0.803223;
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 545 ##############################
Diversity:       993 / 1000
Average Fitness: 2.93509e+024
Average Size:    132.11

Current Best Program:
// Fitness Information: 1.04121
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[3] = cf[0] + r[2];
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = r[1] - -0.803223;
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 546 ##############################
Diversity:       993 / 1000
Average Fitness: 4.4283e+025
Average Size:    132.526

Current Best Program:
// Fitness Information: 1.04121
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[3] = cf[0] + r[2];
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = r[1] - -0.803223;
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 547 ##############################
Diversity:       997 / 1000
Average Fitness: 2.14471e+055
Average Size:    133.881

Current Best Program:
// Fitness Information: 1.04121
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[3] = cf[0] + r[2];
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = r[1] - -0.803223;
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 548 ##############################
Diversity:       996 / 1000
Average Fitness: 1.4277e+026
Average Size:    136.16

Current Best Program:
// Fitness Information: 1.04121
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[3] = cf[0] + r[2];
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = r[1] - -0.803223;
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 549 ##############################
Diversity:       996 / 1000
Average Fitness: 8.08637e+024
Average Size:    138.276

Current Best Program:
// Fitness Information: 1.04121
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[3] = cf[0] + r[2];
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = r[1] - -0.803223;
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 550 ##############################
Diversity:       994 / 1000
Average Fitness: 2.10268e+055
Average Size:    138.833

Current Best Program:
// Fitness Information: 1.04121
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[3] = cf[0] + r[2];
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = r[1] - -0.803223;
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(r[2] < cf[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 551 ##############################
Diversity:       993 / 1000
Average Fitness: 2.61453e+055
Average Size:    139.319

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 552 ##############################
Diversity:       987 / 1000
Average Fitness: 7.42447e+024
Average Size:    139.263

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 553 ##############################
Diversity:       989 / 1000
Average Fitness: 4.40264e+024
Average Size:    138.603

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 554 ##############################
Diversity:       993 / 1000
Average Fitness: 1.72152e+084
Average Size:    138.732

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 555 ##############################
Diversity:       990 / 1000
Average Fitness: 1.17404e+025
Average Size:    137.972

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 556 ##############################
Diversity:       991 / 1000
Average Fitness: 4.29687e+025
Average Size:    139.37

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 557 ##############################
Diversity:       991 / 1000
Average Fitness: 7.33773e+024
Average Size:    137.353

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 558 ##############################
Diversity:       993 / 1000
Average Fitness: 2.61453e+055
Average Size:    139.003

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 559 ##############################
Diversity:       991 / 1000
Average Fitness: 8.82754e+025
Average Size:    137.54

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 560 ##############################
Diversity:       991 / 1000
Average Fitness: 2.12239e+025
Average Size:    138.09

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 561 ##############################
Diversity:       993 / 1000
Average Fitness: 1.46755e+025
Average Size:    135.573

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 562 ##############################
Diversity:       991 / 1000
Average Fitness: 4.25114e+025
Average Size:    134.561

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 563 ##############################
Diversity:       991 / 1000
Average Fitness: 4.75924e+055
Average Size:    131.499

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 564 ##############################
Diversity:       991 / 1000
Average Fitness: 1.87242e+025
Average Size:    129.4

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 565 ##############################
Diversity:       991 / 1000
Average Fitness: 3.59451e+024
Average Size:    128.653

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 566 ##############################
Diversity:       994 / 1000
Average Fitness: 1.66608e+026
Average Size:    128.685

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 567 ##############################
Diversity:       991 / 1000
Average Fitness: 3.68645e+025
Average Size:    128.924

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 568 ##############################
Diversity:       986 / 1000
Average Fitness: 7.25513e+026
Average Size:    129.978

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 569 ##############################
Diversity:       991 / 1000
Average Fitness: 6.15494e+024
Average Size:    128.73

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 570 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    129.358

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 571 ##############################
Diversity:       992 / 1000
Average Fitness: 6.52961e+024
Average Size:    130.061

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 572 ##############################
Diversity:       991 / 1000
Average Fitness: 5.87018e+024
Average Size:    128.146

Current Best Program:
// Fitness Information: 1.02581
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = cf[0] / r[4];
	//r[0] = -0.255493 * r[1];
	//if(r[3] < r[1])
	//if(0.99231 < r[2])
	//r[3] = cf[0] - -0.347046;
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(r[3] < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//if(r[4] < 0.527954)
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//if(r[3] < r[1])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = r[0] - -0.803223;
	//r[2] = r[5] + cf[0];
	//r[5] = cf[0] / r[1];
	//if(0.763794 < r[1])
	//r[0] = 0.99231 - r[2];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.934692;
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] * r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//r[1] = cf[0] - -0.803223;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.934692;
	//if(r[1] < 0.0737305)
	//r[0] = 0.99231 - r[2];
	//r[3] = 0.227783 + r[3];
	//r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[1] = cf[0] * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[3] = r[1] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 573 ##############################
Diversity:       987 / 1000
Average Fitness: 3.24589e+026
Average Size:    128.404

Current Best Program:
// Fitness Information: 1.01914
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 574 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    127.308

Current Best Program:
// Fitness Information: 1.01914
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 575 ##############################
Diversity:       991 / 1000
Average Fitness: 4.93397e+082
Average Size:    127.239

Current Best Program:
// Fitness Information: 1.01914
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 576 ##############################
Diversity:       992 / 1000
Average Fitness: 2.61453e+055
Average Size:    125.251

Current Best Program:
// Fitness Information: 1.01914
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 577 ##############################
Diversity:       992 / 1000
Average Fitness: 7.33773e+024
Average Size:    125.782

Current Best Program:
// Fitness Information: 1.01914
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 578 ##############################
Diversity:       994 / 1000
Average Fitness: 1.505e+025
Average Size:    124.325

Current Best Program:
// Fitness Information: 1.01914
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 579 ##############################
Diversity:       991 / 1000
Average Fitness: 7.33773e+024
Average Size:    123.043

Current Best Program:
// Fitness Information: 1.01914
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 580 ##############################
Diversity:       988 / 1000
Average Fitness: 2.61453e+055
Average Size:    119.326

Current Best Program:
// Fitness Information: 1.01914
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 581 ##############################
Diversity:       995 / 1000
Average Fitness: 5.70043e+025
Average Size:    115.67

Current Best Program:
// Fitness Information: 1.01914
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 582 ##############################
Diversity:       992 / 1000
Average Fitness: 5.87018e+024
Average Size:    111.072

Current Best Program:
// Fitness Information: 1.01827
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[3] = -0.719055 + r[5];
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - -0.682861;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[2] = 0.786804 / -0.53009;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.747864;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 583 ##############################
Diversity:       993 / 1000
Average Fitness: 7.87319e+025
Average Size:    108.622

Current Best Program:
// Fitness Information: 1.01827
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[3] = -0.719055 + r[5];
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - -0.682861;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[2] = 0.786804 / -0.53009;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.747864;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 584 ##############################
Diversity:       990 / 1000
Average Fitness: 8.80528e+024
Average Size:    107.233

Current Best Program:
// Fitness Information: 1.01827
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[3] = -0.719055 + r[5];
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - -0.682861;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[2] = 0.786804 / -0.53009;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.747864;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 585 ##############################
Diversity:       991 / 1000
Average Fitness: 1.86545e+025
Average Size:    106.591

Current Best Program:
// Fitness Information: 1.01827
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[3] = -0.719055 + r[5];
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - -0.682861;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[2] = 0.786804 / -0.53009;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.747864;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 586 ##############################
Diversity:       990 / 1000
Average Fitness: 1.02937e+025
Average Size:    104.92

Current Best Program:
// Fitness Information: 1.01827
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[3] = -0.719055 + r[5];
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - -0.682861;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[2] = 0.786804 / -0.53009;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.747864;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 587 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    101.731

Current Best Program:
// Fitness Information: 1.01827
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[3] = -0.719055 + r[5];
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - -0.682861;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[2] = 0.786804 / -0.53009;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.747864;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 588 ##############################
Diversity:       992 / 1000
Average Fitness: 8.80528e+024
Average Size:    101.925

Current Best Program:
// Fitness Information: 1.01827
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[3] = -0.719055 + r[5];
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - -0.682861;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[2] = 0.786804 / -0.53009;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.747864;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 589 ##############################
Diversity:       990 / 1000
Average Fitness: 1.73935e+026
Average Size:    102.027

Current Best Program:
// Fitness Information: 1.01827
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] + -0.13739;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//r[0] = 0.125732 / cf[0];
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[3] = -0.719055 + r[5];
	//r[2] = r[4] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - -0.682861;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * -0.230652;
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[2] = 0.786804 / -0.53009;
	//r[2] = cf[0] * r[5];
	//r[2] = -0.810669 + cf[0];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0687866;
	//r[2] = r[1] * r[2];
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.747864;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 590 ##############################
Diversity:       992 / 1000
Average Fitness: 3.14522e+025
Average Size:    101.897

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 591 ##############################
Diversity:       996 / 1000
Average Fitness: 1.76106e+025
Average Size:    100.628

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 592 ##############################
Diversity:       997 / 1000
Average Fitness: 2.61453e+055
Average Size:    100.868

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 593 ##############################
Diversity:       996 / 1000
Average Fitness: 5.87018e+024
Average Size:    98.752

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 594 ##############################
Diversity:       997 / 1000
Average Fitness: 1.60617e+026
Average Size:    96.713

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 595 ##############################
Diversity:       995 / 1000
Average Fitness: 2.61453e+055
Average Size:    95.838

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 596 ##############################
Diversity:       997 / 1000
Average Fitness: 6.35264e+052
Average Size:    96.423

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 597 ##############################
Diversity:       993 / 1000
Average Fitness: 4.91577e+025
Average Size:    97.8

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 598 ##############################
Diversity:       993 / 1000
Average Fitness: 2.61453e+055
Average Size:    98.074

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 599 ##############################
Diversity:       989 / 1000
Average Fitness: 7.62626e+024
Average Size:    97.662

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 600 ##############################
Diversity:       988 / 1000
Average Fitness: 9.45908e+026
Average Size:    97.579

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 601 ##############################
Diversity:       991 / 1000
Average Fitness: 5.87271e+053
Average Size:    97.598

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 602 ##############################
Diversity:       992 / 1000
Average Fitness: 4.38818e+027
Average Size:    97.48

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 603 ##############################
Diversity:       992 / 1000
Average Fitness: 5.40202e+026
Average Size:    97.57

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 604 ##############################
Diversity:       990 / 1000
Average Fitness: 7.54994e+024
Average Size:    96.83

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 605 ##############################
Diversity:       993 / 1000
Average Fitness: 2.9555e+026
Average Size:    96.777

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 606 ##############################
Diversity:       992 / 1000
Average Fitness: 9.34111e+026
Average Size:    96.914

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 607 ##############################
Diversity:       990 / 1000
Average Fitness: 3.79366e+055
Average Size:    97.307

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 608 ##############################
Diversity:       990 / 1000
Average Fitness: 248114
Average Size:    96.146

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 609 ##############################
Diversity:       990 / 1000
Average Fitness: 1.46755e+024
Average Size:    98.447

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 610 ##############################
Diversity:       990 / 1000
Average Fitness: 7.13811e+026
Average Size:    98.342

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 611 ##############################
Diversity:       989 / 1000
Average Fitness: 9.67509e+026
Average Size:    99.059

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 612 ##############################
Diversity:       993 / 1000
Average Fitness: 5.31484e+025
Average Size:    97.997

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 613 ##############################
Diversity:       990 / 1000
Average Fitness: 1.07653e+027
Average Size:    97.585

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 614 ##############################
Diversity:       990 / 1000
Average Fitness: 4.69403e+026
Average Size:    97.285

Current Best Program:
// Fitness Information: 1.0149
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = cf[0] - -0.803223;
	//r[3] = r[1] * r[2];
	//r[3] = 0.994507 * cf[0];
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.872803 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 615 ##############################
Diversity:       991 / 1000
Average Fitness: 1.0073e+114
Average Size:    97.402

Current Best Program:
// Fitness Information: 1.00583
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 616 ##############################
Diversity:       990 / 1000
Average Fitness: 4.76155e+026
Average Size:    97.549

Current Best Program:
// Fitness Information: 1.00583
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 617 ##############################
Diversity:       992 / 1000
Average Fitness: 4.91241e+055
Average Size:    98.311

Current Best Program:
// Fitness Information: 1.00583
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 618 ##############################
Diversity:       989 / 1000
Average Fitness: 2.052e+027
Average Size:    97.706

Current Best Program:
// Fitness Information: 1.00583
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 619 ##############################
Diversity:       989 / 1000
Average Fitness: 1.25512e+057
Average Size:    97.471

Current Best Program:
// Fitness Information: 1.00583
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 620 ##############################
Diversity:       987 / 1000
Average Fitness: 5.94962e+024
Average Size:    98.33

Current Best Program:
// Fitness Information: 1.00583
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 621 ##############################
Diversity:       992 / 1000
Average Fitness: 5.00868e+026
Average Size:    98.561

Current Best Program:
// Fitness Information: 1.00583
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 622 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    97.437

Current Best Program:
// Fitness Information: 1.00583
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 623 ##############################
Diversity:       990 / 1000
Average Fitness: 2.46254e+055
Average Size:    98.781

Current Best Program:
// Fitness Information: 1.00583
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 624 ##############################
Diversity:       991 / 1000
Average Fitness: 6.99338e+026
Average Size:    97.198

Current Best Program:
// Fitness Information: 1.00583
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 625 ##############################
Diversity:       989 / 1000
Average Fitness: 8.92633e+025
Average Size:    98.869

Current Best Program:
// Fitness Information: 1.00583
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.377991 < cf[0])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 626 ##############################
Diversity:       992 / 1000
Average Fitness: 9.42109e+026
Average Size:    99.058

Current Best Program:
// Fitness Information: 0.981208
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//r[4] = r[2] / r[4];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] + r[0];
	//if(0.872803 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[2] = r[0] - r[3];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(-0.958496 < -0.789734)
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(cf[0] < r[4])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 627 ##############################
Diversity:       993 / 1000
Average Fitness: 2.95304e+055
Average Size:    97.875

Current Best Program:
// Fitness Information: 0.981208
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[3] = -0.151367 / -0.640259;
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//r[4] = r[2] / r[4];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] + r[0];
	//if(0.872803 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[2] = r[0] - r[3];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 * cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[5];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	r[1] = r[2] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(-0.958496 < -0.789734)
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(cf[0] < r[4])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[2] = -0.74353 / 0.444519;
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.929871;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 628 ##############################
Diversity:       990 / 1000
Average Fitness: 9.63271e+055
Average Size:    97.685

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 629 ##############################
Diversity:       990 / 1000
Average Fitness: 1.8586e+056
Average Size:    98.917

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 630 ##############################
Diversity:       991 / 1000
Average Fitness: 2.81003e+024
Average Size:    97.824

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 631 ##############################
Diversity:       992 / 1000
Average Fitness: 3.66067e+055
Average Size:    98.147

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 632 ##############################
Diversity:       993 / 1000
Average Fitness: 2.61453e+055
Average Size:    97.781

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 633 ##############################
Diversity:       989 / 1000
Average Fitness: 1.87988e+114
Average Size:    97.968

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 634 ##############################
Diversity:       993 / 1000
Average Fitness: 1.53377e+026
Average Size:    99.499

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 635 ##############################
Diversity:       995 / 1000
Average Fitness: 2.61453e+055
Average Size:    101.276

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 636 ##############################
Diversity:       993 / 1000
Average Fitness: 9.6679e+026
Average Size:    100.398

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 637 ##############################
Diversity:       989 / 1000
Average Fitness: 2.61453e+055
Average Size:    99.882

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 638 ##############################
Diversity:       991 / 1000
Average Fitness: 4.67055e+026
Average Size:    98.52

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 639 ##############################
Diversity:       988 / 1000
Average Fitness: 1.37974e+056
Average Size:    97.646

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 640 ##############################
Diversity:       990 / 1000
Average Fitness: 5.66632e+029
Average Size:    95.476

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 641 ##############################
Diversity:       992 / 1000
Average Fitness: 6.21171e+026
Average Size:    95.059

Current Best Program:
// Fitness Information: 0.975418
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	//r[1] = r[2] - 0.929871;
	//r[3] = -0.151367 / -0.640259;
	//if(0.125732 < cf[0])
	//r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	//if(cf[0] < cf[0])
	//r[0] = -0.38562 * r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = r[2] - 0.929871;
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = cf[0] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.763794 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 642 ##############################
Diversity:       990 / 1000
Average Fitness: 1.83994e+027
Average Size:    93.405

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 643 ##############################
Diversity:       990 / 1000
Average Fitness: 6.19724e+030
Average Size:    93.493

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 644 ##############################
Diversity:       994 / 1000
Average Fitness: 8.03734e+053
Average Size:    93.469

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 645 ##############################
Diversity:       990 / 1000
Average Fitness: 8.03734e+053
Average Size:    94.316

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 646 ##############################
Diversity:       992 / 1000
Average Fitness: 1.48308e+053
Average Size:    93.68

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 647 ##############################
Diversity:       992 / 1000
Average Fitness: 6.67107e+054
Average Size:    93.553

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 648 ##############################
Diversity:       992 / 1000
Average Fitness: 2.7735e+053
Average Size:    93.074

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 649 ##############################
Diversity:       991 / 1000
Average Fitness: 8.11255e+026
Average Size:    94.046

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 650 ##############################
Diversity:       990 / 1000
Average Fitness: 6.95229e+055
Average Size:    93.892

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 651 ##############################
Diversity:       990 / 1000
Average Fitness: 59382.1
Average Size:    93.95

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 652 ##############################
Diversity:       991 / 1000
Average Fitness: 2.15369e+051
Average Size:    94.15

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 653 ##############################
Diversity:       991 / 1000
Average Fitness: 5.69249e+029
Average Size:    95.504

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 654 ##############################
Diversity:       993 / 1000
Average Fitness: 1.23127e+055
Average Size:    94.19

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 655 ##############################
Diversity:       995 / 1000
Average Fitness: 4.53958e+054
Average Size:    93.74

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 656 ##############################
Diversity:       995 / 1000
Average Fitness: 2.75088e+082
Average Size:    94.088

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 657 ##############################
Diversity:       987 / 1000
Average Fitness: 6.43949e+082
Average Size:    95.252

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 658 ##############################
Diversity:       989 / 1000
Average Fitness: 4.69519e+026
Average Size:    94.416

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 659 ##############################
Diversity:       989 / 1000
Average Fitness: 1.7894e+055
Average Size:    95.526

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 660 ##############################
Diversity:       993 / 1000
Average Fitness: 2.93141e+082
Average Size:    98.271

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 661 ##############################
Diversity:       995 / 1000
Average Fitness: 3.01729e+055
Average Size:    96.777

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 662 ##############################
Diversity:       990 / 1000
Average Fitness: 1.15637e+026
Average Size:    96.586

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 663 ##############################
Diversity:       994 / 1000
Average Fitness: 1.4876e+027
Average Size:    97.951

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 664 ##############################
Diversity:       995 / 1000
Average Fitness: 4.90092e+026
Average Size:    97.597

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 665 ##############################
Diversity:       994 / 1000
Average Fitness: 1.3048e+053
Average Size:    97.433

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 666 ##############################
Diversity:       995 / 1000
Average Fitness: 1.08956e+055
Average Size:    98.399

Current Best Program:
// Fitness Information: 0.970921
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 667 ##############################
Diversity:       994 / 1000
Average Fitness: 26939.3
Average Size:    97.64

Current Best Program:
// Fitness Information: 0.968845
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 668 ##############################
Diversity:       993 / 1000
Average Fitness: 3.67111e+055
Average Size:    98.182

Current Best Program:
// Fitness Information: 0.968845
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 669 ##############################
Diversity:       994 / 1000
Average Fitness: 9.60951e+025
Average Size:    98.072

Current Best Program:
// Fitness Information: 0.968845
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 670 ##############################
Diversity:       992 / 1000
Average Fitness: 6.34943e+054
Average Size:    98.867

Current Best Program:
// Fitness Information: 0.968845
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 671 ##############################
Diversity:       994 / 1000
Average Fitness: 2.67584e+055
Average Size:    97.608

Current Best Program:
// Fitness Information: 0.968845
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(cf[0] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 672 ##############################
Diversity:       991 / 1000
Average Fitness: 2.17951e+028
Average Size:    97.996

Current Best Program:
// Fitness Information: 0.949995
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < -0.910828)
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(r[4] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.762756 * r[1];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.711304 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[4] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 673 ##############################
Diversity:       992 / 1000
Average Fitness: 8286.06
Average Size:    98.237

Current Best Program:
// Fitness Information: 0.949995
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < -0.910828)
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(r[4] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.762756 * r[1];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.711304 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[4] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 674 ##############################
Diversity:       993 / 1000
Average Fitness: 1.62007e+042
Average Size:    97.059

Current Best Program:
// Fitness Information: 0.949995
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < -0.910828)
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(r[4] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.762756 * r[1];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.711304 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[4] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 675 ##############################
Diversity:       992 / 1000
Average Fitness: 2.12786e+025
Average Size:    98.095

Current Best Program:
// Fitness Information: 0.949995
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < -0.910828)
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(r[4] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.762756 * r[1];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.711304 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[4] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 676 ##############################
Diversity:       992 / 1000
Average Fitness: 2.61453e+055
Average Size:    98.853

Current Best Program:
// Fitness Information: 0.949995
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < -0.910828)
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(r[4] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.762756 * r[1];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.711304 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[4] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 677 ##############################
Diversity:       993 / 1000
Average Fitness: 3.14092e+082
Average Size:    99.002

Current Best Program:
// Fitness Information: 0.949995
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < -0.910828)
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(r[4] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.762756 * r[1];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.711304 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[4] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 678 ##############################
Diversity:       992 / 1000
Average Fitness: 2.61453e+055
Average Size:    99.683

Current Best Program:
// Fitness Information: 0.949995
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < -0.910828)
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(r[4] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.762756 * r[1];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.711304 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[4] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 679 ##############################
Diversity:       994 / 1000
Average Fitness: 6.73494e+026
Average Size:    98.082

Current Best Program:
// Fitness Information: 0.949995
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < -0.910828)
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(r[4] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.762756 * r[1];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.711304 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[4] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 680 ##############################
Diversity:       992 / 1000
Average Fitness: 5.34712e+026
Average Size:    98.889

Current Best Program:
// Fitness Information: 0.949995
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < -0.910828)
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(r[4] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.762756 * r[1];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.711304 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[4] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 681 ##############################
Diversity:       988 / 1000
Average Fitness: 8.11396e+026
Average Size:    100.419

Current Best Program:
// Fitness Information: 0.949995
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < -0.910828)
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(r[4] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.762756 * r[1];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.711304 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[4] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 682 ##############################
Diversity:       991 / 1000
Average Fitness: 6.14945e+054
Average Size:    98.875

Current Best Program:
// Fitness Information: 0.949995
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < -0.910828)
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[1] + r[2];
	//r[5] = cf[0] * 0.569702;
	//r[3] = 0.625977 * -0.8526;
	//r[0] = -0.38562 * -0.0687866;
	//r[2] = cf[0] - 0.730347;
	//r[2] = -0.680969 * r[5];
	//r[5] = r[5] * -0.935852;
	r[2] = cf[0] * cf[0];
	//r[3] = -0.151367 / -0.640259;
	if(0.125732 < cf[0])
	r[2] = 0.84668 - -0.803223;
	//r[3] = r[1] * r[2];
	if(r[4] < cf[0])
	r[4] = r[2] + r[4];
	//r[2] = cf[0] - -0.803223;
	//r[2] = r[0] * r[5];
	//r[3] = -0.151367 / -0.640259;
	//r[1] = r[2] - 0.929871;
	//r[2] = r[1] * r[2];
	//if(r[4] < r[1])
	//r[1] = -0.47229 * r[5];
	//if(r[2] < cf[0])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - cf[0];
	//r[3] = r[3] - r[1];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[1] = r[2] / r[4];
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.762756 * r[1];
	//r[2] = r[2] - r[3];
	r[0] = -0.38562 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.711304 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.838562;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[4] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 683 ##############################
Diversity:       990 / 1000
Average Fitness: 6.05245e+052
Average Size:    98.99

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 684 ##############################
Diversity:       993 / 1000
Average Fitness: 5.34396e+082
Average Size:    98.408

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 685 ##############################
Diversity:       993 / 1000
Average Fitness: 3.63624e+111
Average Size:    100.02

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 686 ##############################
Diversity:       987 / 1000
Average Fitness: 5.25252e+081
Average Size:    100.856

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 687 ##############################
Diversity:       992 / 1000
Average Fitness: 4.95826e+055
Average Size:    99.033

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 688 ##############################
Diversity:       993 / 1000
Average Fitness: 9.6494e+054
Average Size:    99.05

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 689 ##############################
Diversity:       995 / 1000
Average Fitness: 4.22175e+082
Average Size:    100.023

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 690 ##############################
Diversity:       991 / 1000
Average Fitness: 8.03765e+022
Average Size:    100.224

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 691 ##############################
Diversity:       994 / 1000
Average Fitness: 1.73484e+082
Average Size:    100.884

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 692 ##############################
Diversity:       993 / 1000
Average Fitness: 9.14115e+083
Average Size:    101.091

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 693 ##############################
Diversity:       989 / 1000
Average Fitness: 2.87618e+052
Average Size:    98.782

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 694 ##############################
Diversity:       993 / 1000
Average Fitness: 3.45135e+084
Average Size:    98.056

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 695 ##############################
Diversity:       990 / 1000
Average Fitness: 7.38527e+055
Average Size:    97.467

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 696 ##############################
Diversity:       990 / 1000
Average Fitness: 1.02084e+055
Average Size:    95.982

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 697 ##############################
Diversity:       986 / 1000
Average Fitness: 3.36677e+026
Average Size:    92.855

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 698 ##############################
Diversity:       990 / 1000
Average Fitness: 4.90831e+054
Average Size:    93.432

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 699 ##############################
Diversity:       991 / 1000
Average Fitness: 7.48734e+025
Average Size:    92.721

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 700 ##############################
Diversity:       990 / 1000
Average Fitness: 4.94081e+055
Average Size:    93.684

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 701 ##############################
Diversity:       990 / 1000
Average Fitness: 3.4986e+051
Average Size:    93.316

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 702 ##############################
Diversity:       993 / 1000
Average Fitness: 5.47589e+051
Average Size:    92.418

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 703 ##############################
Diversity:       992 / 1000
Average Fitness: 2.98786e+023
Average Size:    92.369

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 704 ##############################
Diversity:       992 / 1000
Average Fitness: 1.1391e+025
Average Size:    91.624

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 705 ##############################
Diversity:       987 / 1000
Average Fitness: 1.23437e+024
Average Size:    91.257

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 706 ##############################
Diversity:       988 / 1000
Average Fitness: 2.94936e+023
Average Size:    91.899

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 707 ##############################
Diversity:       988 / 1000
Average Fitness: 2.61453e+055
Average Size:    93.117

Current Best Program:
// Fitness Information: 0.9249
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//if(cf[0] < r[1])
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - 0.744507;
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = -0.434204 * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.929871;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - r[1];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 708 ##############################
Diversity:       991 / 1000
Average Fitness: 2.10062e+056
Average Size:    92.718

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 709 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    91.375

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 710 ##############################
Diversity:       992 / 1000
Average Fitness: 1.80812e+023
Average Size:    90.624

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 711 ##############################
Diversity:       990 / 1000
Average Fitness: 2.82093e+055
Average Size:    90.971

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 712 ##############################
Diversity:       993 / 1000
Average Fitness: 3.34674e+025
Average Size:    90.196

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 713 ##############################
Diversity:       993 / 1000
Average Fitness: 3.10621e+027
Average Size:    90.501

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 714 ##############################
Diversity:       988 / 1000
Average Fitness: 7.29345e+025
Average Size:    91.972

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 715 ##############################
Diversity:       993 / 1000
Average Fitness: 5.89872e+023
Average Size:    91.338

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 716 ##############################
Diversity:       991 / 1000
Average Fitness: 3.98941e+026
Average Size:    91.288

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 717 ##############################
Diversity:       992 / 1000
Average Fitness: 2.35949e+023
Average Size:    90.517

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 718 ##############################
Diversity:       993 / 1000
Average Fitness: 7.01711e+024
Average Size:    90.054

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 719 ##############################
Diversity:       994 / 1000
Average Fitness: 1.2038e+026
Average Size:    90.737

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 720 ##############################
Diversity:       992 / 1000
Average Fitness: 5.93722e+023
Average Size:    89.213

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 721 ##############################
Diversity:       987 / 1000
Average Fitness: 5.69722e+024
Average Size:    89.988

Current Best Program:
// Fitness Information: 0.924646
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[2] < r[4])
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.761047;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.949097;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	r[0] = -0.38562 - -0.0687866;
	r[5] = cf[0] - r[3];
}




############################## 722 ##############################
Diversity:       992 / 1000
Average Fitness: 2.61453e+055
Average Size:    89.399

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 723 ##############################
Diversity:       989 / 1000
Average Fitness: 2.94936e+023
Average Size:    90.444

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 724 ##############################
Diversity:       995 / 1000
Average Fitness: 5.28216e+024
Average Size:    91.052

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 725 ##############################
Diversity:       994 / 1000
Average Fitness: 1.1112e+027
Average Size:    90.892

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 726 ##############################
Diversity:       991 / 1000
Average Fitness: 9.34808e+025
Average Size:    90.695

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 727 ##############################
Diversity:       992 / 1000
Average Fitness: 2.94936e+023
Average Size:    89.988

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 728 ##############################
Diversity:       995 / 1000
Average Fitness: 2.61453e+055
Average Size:    90.324

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 729 ##############################
Diversity:       992 / 1000
Average Fitness: 9.32487e+025
Average Size:    90.314

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 730 ##############################
Diversity:       993 / 1000
Average Fitness: 2.98786e+023
Average Size:    92.041

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 731 ##############################
Diversity:       991 / 1000
Average Fitness: 2.91174e+026
Average Size:    91.4

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 732 ##############################
Diversity:       993 / 1000
Average Fitness: 2.4219e+024
Average Size:    91.357

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 733 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    90.424

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 734 ##############################
Diversity:       994 / 1000
Average Fitness: 5.47611e+026
Average Size:    90.77

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 735 ##############################
Diversity:       991 / 1000
Average Fitness: 5.05465e+024
Average Size:    90.358

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 736 ##############################
Diversity:       992 / 1000
Average Fitness: 2.88749e+026
Average Size:    91.666

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 737 ##############################
Diversity:       993 / 1000
Average Fitness: 1.50027e+026
Average Size:    90.595

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 738 ##############################
Diversity:       990 / 1000
Average Fitness: 3.1009e+025
Average Size:    90.127

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 739 ##############################
Diversity:       991 / 1000
Average Fitness: 1.1214e+025
Average Size:    90.755

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 740 ##############################
Diversity:       987 / 1000
Average Fitness: 1.21825e+023
Average Size:    91.334

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 741 ##############################
Diversity:       991 / 1000
Average Fitness: 3.30585e+025
Average Size:    90.33

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 742 ##############################
Diversity:       992 / 1000
Average Fitness: 1.76961e+023
Average Size:    89.879

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 743 ##############################
Diversity:       993 / 1000
Average Fitness: 1.80812e+023
Average Size:    90.146

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 744 ##############################
Diversity:       992 / 1000
Average Fitness: 1.76961e+023
Average Size:    90.483

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 745 ##############################
Diversity:       991 / 1000
Average Fitness: 3.57773e+023
Average Size:    90.132

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 746 ##############################
Diversity:       990 / 1000
Average Fitness: 1.61207e+025
Average Size:    89.73

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 747 ##############################
Diversity:       994 / 1000
Average Fitness: 1.3709e+025
Average Size:    88.43

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 748 ##############################
Diversity:       992 / 1000
Average Fitness: 1.80812e+023
Average Size:    88.84

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 749 ##############################
Diversity:       995 / 1000
Average Fitness: 4.50751e+053
Average Size:    89.55

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 750 ##############################
Diversity:       993 / 1000
Average Fitness: 5.27392e+053
Average Size:    89.814

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 751 ##############################
Diversity:       992 / 1000
Average Fitness: 2.94936e+023
Average Size:    89.423

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 752 ##############################
Diversity:       991 / 1000
Average Fitness: 4.43664e+023
Average Size:    90.41

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 753 ##############################
Diversity:       992 / 1000
Average Fitness: 2.61453e+055
Average Size:    90.376

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 754 ##############################
Diversity:       986 / 1000
Average Fitness: 1.48406e+054
Average Size:    89.794

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 755 ##############################
Diversity:       992 / 1000
Average Fitness: 1.55784e+024
Average Size:    89.963

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 756 ##############################
Diversity:       995 / 1000
Average Fitness: 1.1332e+025
Average Size:    91.072

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 757 ##############################
Diversity:       992 / 1000
Average Fitness: 1.28891e+054
Average Size:    91.38

Current Best Program:
// Fitness Information: 0.918075
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = cf[0] * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[3] = cf[0] / r[4];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = 0.99231 + r[3];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] / 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = r[3] - cf[0];
	//r[0] = 0.99231 - r[2];
	//r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	//r[2] = cf[0] - -0.803223;
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = -0.0252075 / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = -0.88446 * r[4];
	if(r[4] < r[1])
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 758 ##############################
Diversity:       992 / 1000
Average Fitness: 1.76961e+023
Average Size:    92.651

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 759 ##############################
Diversity:       994 / 1000
Average Fitness: 1.76961e+023
Average Size:    91.813

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 760 ##############################
Diversity:       989 / 1000
Average Fitness: 3.8825e+055
Average Size:    91.471

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 761 ##############################
Diversity:       992 / 1000
Average Fitness: 1.07237e+024
Average Size:    91.078

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 762 ##############################
Diversity:       993 / 1000
Average Fitness: 5.93267e+025
Average Size:    90.762

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 763 ##############################
Diversity:       995 / 1000
Average Fitness: 8.90989e+024
Average Size:    89.526

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 764 ##############################
Diversity:       991 / 1000
Average Fitness: 1.51424e+054
Average Size:    90.792

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 765 ##############################
Diversity:       993 / 1000
Average Fitness: 2.475e+023
Average Size:    89.864

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 766 ##############################
Diversity:       990 / 1000
Average Fitness: 2.66436e+054
Average Size:    90.117

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 767 ##############################
Diversity:       985 / 1000
Average Fitness: 7.80801e+025
Average Size:    89.978

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 768 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    90.421

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 769 ##############################
Diversity:       990 / 1000
Average Fitness: 5.81128e+025
Average Size:    89.997

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 770 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    89.856

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 771 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    88.135

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 772 ##############################
Diversity:       990 / 1000
Average Fitness: 4.32303e+025
Average Size:    87.834

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 773 ##############################
Diversity:       988 / 1000
Average Fitness: 1.33374e+082
Average Size:    87.429

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 774 ##############################
Diversity:       993 / 1000
Average Fitness: 2.61453e+055
Average Size:    87.272

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 775 ##############################
Diversity:       989 / 1000
Average Fitness: 1.88214e+025
Average Size:    86.528

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 776 ##############################
Diversity:       989 / 1000
Average Fitness: 2.00961e+026
Average Size:    85.703

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 777 ##############################
Diversity:       991 / 1000
Average Fitness: 5.89872e+022
Average Size:    86.63

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 778 ##############################
Diversity:       991 / 1000
Average Fitness: 5.86533e+024
Average Size:    86.895

Current Best Program:
// Fitness Information: 0.918071
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - cf[0];
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(cf[0] < r[0])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 779 ##############################
Diversity:       989 / 1000
Average Fitness: 3.27756e+026
Average Size:    87.539

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 780 ##############################
Diversity:       989 / 1000
Average Fitness: 2.61453e+055
Average Size:    88.092

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 781 ##############################
Diversity:       992 / 1000
Average Fitness: 2.12697e+024
Average Size:    88.541

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 782 ##############################
Diversity:       991 / 1000
Average Fitness: 1.10487e+025
Average Size:    88.234

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 783 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    87.537

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 784 ##############################
Diversity:       989 / 1000
Average Fitness: 8.06856e+052
Average Size:    88.265

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 785 ##############################
Diversity:       987 / 1000
Average Fitness: 5.22905e+055
Average Size:    88.699

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 786 ##############################
Diversity:       992 / 1000
Average Fitness: 2.10263e+007
Average Size:    87.786

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 787 ##############################
Diversity:       990 / 1000
Average Fitness: 1.67154e+024
Average Size:    86.25

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 788 ##############################
Diversity:       988 / 1000
Average Fitness: 4.27495e+025
Average Size:    87.428

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 789 ##############################
Diversity:       987 / 1000
Average Fitness: 7.30406e+007
Average Size:    88.49

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 790 ##############################
Diversity:       988 / 1000
Average Fitness: 2.61453e+055
Average Size:    88.768

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 791 ##############################
Diversity:       987 / 1000
Average Fitness: 2.29285e+051
Average Size:    88.77

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 792 ##############################
Diversity:       986 / 1000
Average Fitness: 3.42476e+027
Average Size:    89.907

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 793 ##############################
Diversity:       985 / 1000
Average Fitness: 1.13664e+025
Average Size:    89.513

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 794 ##############################
Diversity:       986 / 1000
Average Fitness: 2.3226e+026
Average Size:    88.239

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 795 ##############################
Diversity:       987 / 1000
Average Fitness: 2.86023e+026
Average Size:    88.906

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 796 ##############################
Diversity:       986 / 1000
Average Fitness: 1.11814e+027
Average Size:    88.455

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 797 ##############################
Diversity:       988 / 1000
Average Fitness: 2.97874e+025
Average Size:    88.179

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 798 ##############################
Diversity:       984 / 1000
Average Fitness: 4.04714e+025
Average Size:    89.153

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 799 ##############################
Diversity:       984 / 1000
Average Fitness: 1.10371e+025
Average Size:    88.322

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 800 ##############################
Diversity:       989 / 1000
Average Fitness: 2.38389e+025
Average Size:    87.838

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 801 ##############################
Diversity:       984 / 1000
Average Fitness: 7.59926e+023
Average Size:    87.529

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 802 ##############################
Diversity:       980 / 1000
Average Fitness: 5.8937e+053
Average Size:    87.863

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 803 ##############################
Diversity:       987 / 1000
Average Fitness: 2.61453e+055
Average Size:    87.681

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 804 ##############################
Diversity:       990 / 1000
Average Fitness: 2.02449e+025
Average Size:    87.526

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 805 ##############################
Diversity:       989 / 1000
Average Fitness: 5.92656e+025
Average Size:    86.939

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 806 ##############################
Diversity:       988 / 1000
Average Fitness: 3.38695e+023
Average Size:    87.677

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 807 ##############################
Diversity:       987 / 1000
Average Fitness: 36780.3
Average Size:    87.563

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 808 ##############################
Diversity:       985 / 1000
Average Fitness: 1.38897e+027
Average Size:    88.579

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 809 ##############################
Diversity:       988 / 1000
Average Fitness: 3.48659e+026
Average Size:    87.299

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 810 ##############################
Diversity:       989 / 1000
Average Fitness: 3.38695e+023
Average Size:    87.864

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 811 ##############################
Diversity:       985 / 1000
Average Fitness: 1.59865e+025
Average Size:    88.323

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 812 ##############################
Diversity:       989 / 1000
Average Fitness: 2.08834e+025
Average Size:    87.445

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 813 ##############################
Diversity:       984 / 1000
Average Fitness: 2.68843e+025
Average Size:    88.021

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 814 ##############################
Diversity:       985 / 1000
Average Fitness: 9.14096e+025
Average Size:    87.744

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 815 ##############################
Diversity:       989 / 1000
Average Fitness: 1.57511e+054
Average Size:    88.176

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 816 ##############################
Diversity:       984 / 1000
Average Fitness: 1.13664e+025
Average Size:    89

Current Best Program:
// Fitness Information: 0.917856
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = r[5] + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[1] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * r[5];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.76886 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] + -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 817 ##############################
Diversity:       988 / 1000
Average Fitness: 5.57421e+025
Average Size:    87.86

Current Best Program:
// Fitness Information: 0.845594
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 818 ##############################
Diversity:       984 / 1000
Average Fitness: 1.10371e+025
Average Size:    89.611

Current Best Program:
// Fitness Information: 0.845594
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 819 ##############################
Diversity:       988 / 1000
Average Fitness: 5.67515e+025
Average Size:    89.81

Current Best Program:
// Fitness Information: 0.845594
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 820 ##############################
Diversity:       985 / 1000
Average Fitness: 5.09008e+024
Average Size:    90.611

Current Best Program:
// Fitness Information: 0.845594
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 821 ##############################
Diversity:       988 / 1000
Average Fitness: 3.06826e+025
Average Size:    89.729

Current Best Program:
// Fitness Information: 0.845594
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 822 ##############################
Diversity:       988 / 1000
Average Fitness: 1.16718e+054
Average Size:    88.517

Current Best Program:
// Fitness Information: 0.845594
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 823 ##############################
Diversity:       989 / 1000
Average Fitness: 2.24034e+025
Average Size:    88.037

Current Best Program:
// Fitness Information: 0.845594
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 824 ##############################
Diversity:       990 / 1000
Average Fitness: 1.69011e+026
Average Size:    88.515

Current Best Program:
// Fitness Information: 0.845594
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 825 ##############################
Diversity:       983 / 1000
Average Fitness: 2.78649e+025
Average Size:    86.862

Current Best Program:
// Fitness Information: 0.845594
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 826 ##############################
Diversity:       985 / 1000
Average Fitness: 1.55583e+025
Average Size:    87.29

Current Best Program:
// Fitness Information: 0.845594
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 827 ##############################
Diversity:       987 / 1000
Average Fitness: 2.61453e+055
Average Size:    87.095

Current Best Program:
// Fitness Information: 0.845594
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 828 ##############################
Diversity:       987 / 1000
Average Fitness: 6.08362e+053
Average Size:    87.077

Current Best Program:
// Fitness Information: 0.845594
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 - -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 829 ##############################
Diversity:       989 / 1000
Average Fitness: 5.55491e+024
Average Size:    87.739

Current Best Program:
// Fitness Information: 0.845594
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[2] = 0.0428467 * -0.852295;
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[2] = cf[0] / -0.803223;
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[0] = -0.517334 - -0.561157;
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//if(r[1] < 0.821411)
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + 0.513916;
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] / -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[5])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.735535;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 830 ##############################
Diversity:       987 / 1000
Average Fitness: 1.7523e+024
Average Size:    87.116

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 831 ##############################
Diversity:       985 / 1000
Average Fitness: 2.61453e+055
Average Size:    87.314

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 832 ##############################
Diversity:       987 / 1000
Average Fitness: 9.40256e+025
Average Size:    88.611

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 833 ##############################
Diversity:       986 / 1000
Average Fitness: 1.04153e+025
Average Size:    88.33

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 834 ##############################
Diversity:       987 / 1000
Average Fitness: 3.5822e+024
Average Size:    87.752

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 835 ##############################
Diversity:       986 / 1000
Average Fitness: 6.70768e+025
Average Size:    87.215

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 836 ##############################
Diversity:       991 / 1000
Average Fitness: 52663.3
Average Size:    88.098

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 837 ##############################
Diversity:       991 / 1000
Average Fitness: 2.86239e+026
Average Size:    89.92

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 838 ##############################
Diversity:       989 / 1000
Average Fitness: 4.31828e+026
Average Size:    89.279

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 839 ##############################
Diversity:       985 / 1000
Average Fitness: 2.61453e+055
Average Size:    89.785

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 840 ##############################
Diversity:       986 / 1000
Average Fitness: 713748
Average Size:    90.328

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 841 ##############################
Diversity:       984 / 1000
Average Fitness: 3.1551e+025
Average Size:    90.713

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 842 ##############################
Diversity:       987 / 1000
Average Fitness: 2.18833e+026
Average Size:    88.449

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 843 ##############################
Diversity:       983 / 1000
Average Fitness: 8.09341e+024
Average Size:    88.478

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 844 ##############################
Diversity:       988 / 1000
Average Fitness: 3.64617e+024
Average Size:    87.422

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 845 ##############################
Diversity:       989 / 1000
Average Fitness: 4.40258e+055
Average Size:    87.615

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 846 ##############################
Diversity:       986 / 1000
Average Fitness: 2.67078e+055
Average Size:    87.276

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 847 ##############################
Diversity:       986 / 1000
Average Fitness: 2.61453e+055
Average Size:    87.05

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 848 ##############################
Diversity:       988 / 1000
Average Fitness: 5.18859e+024
Average Size:    87.68

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 849 ##############################
Diversity:       990 / 1000
Average Fitness: 1.51009e+025
Average Size:    88.195

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 850 ##############################
Diversity:       986 / 1000
Average Fitness: 1.677e+025
Average Size:    88.894

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 851 ##############################
Diversity:       985 / 1000
Average Fitness: 5.11398e+025
Average Size:    89.201

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 852 ##############################
Diversity:       989 / 1000
Average Fitness: 7.64094e+025
Average Size:    89.314

Current Best Program:
// Fitness Information: 0.844471
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(0.15509 < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[0] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(-0.799011 < r[4])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.569702;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 853 ##############################
Diversity:       989 / 1000
Average Fitness: 239094
Average Size:    88.747

Current Best Program:
// Fitness Information: 0.840148
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 854 ##############################
Diversity:       988 / 1000
Average Fitness: 2.04854e+026
Average Size:    88.946

Current Best Program:
// Fitness Information: 0.840148
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 855 ##############################
Diversity:       988 / 1000
Average Fitness: 1.0706e+025
Average Size:    89.477

Current Best Program:
// Fitness Information: 0.840148
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 856 ##############################
Diversity:       988 / 1000
Average Fitness: 2.18185e+023
Average Size:    90.202

Current Best Program:
// Fitness Information: 0.840148
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 857 ##############################
Diversity:       987 / 1000
Average Fitness: 4.66244e+024
Average Size:    87.292

Current Best Program:
// Fitness Information: 0.840148
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + cf[0];
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(0.621948 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 858 ##############################
Diversity:       989 / 1000
Average Fitness: 3.70376e+024
Average Size:    87.381

Current Best Program:
// Fitness Information: 0.839878
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + -0.775085;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[3] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 859 ##############################
Diversity:       994 / 1000
Average Fitness: 4.15563e+025
Average Size:    87.939

Current Best Program:
// Fitness Information: 0.839878
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + -0.775085;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[3] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 860 ##############################
Diversity:       994 / 1000
Average Fitness: 2.61453e+055
Average Size:    87.456

Current Best Program:
// Fitness Information: 0.839878
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + -0.775085;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[3] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 861 ##############################
Diversity:       991 / 1000
Average Fitness: 1.2055e+025
Average Size:    87.506

Current Best Program:
// Fitness Information: 0.839878
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + -0.775085;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[3] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 862 ##############################
Diversity:       992 / 1000
Average Fitness: 1.16402e+027
Average Size:    87.777

Current Best Program:
// Fitness Information: 0.839878
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + -0.775085;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[3] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 863 ##############################
Diversity:       991 / 1000
Average Fitness: 7.79781e+050
Average Size:    88.201

Current Best Program:
// Fitness Information: 0.839878
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + -0.775085;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[3] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 864 ##############################
Diversity:       993 / 1000
Average Fitness: 1.32215e+024
Average Size:    87.243

Current Best Program:
// Fitness Information: 0.839878
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + -0.775085;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[3] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 865 ##############################
Diversity:       994 / 1000
Average Fitness: 9.4154e+025
Average Size:    86.64

Current Best Program:
// Fitness Information: 0.835659
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[5] = 0.0655518 + r[3];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + -0.775085;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 866 ##############################
Diversity:       993 / 1000
Average Fitness: 7.85818e+025
Average Size:    88.096

Current Best Program:
// Fitness Information: 0.835659
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[5] = 0.0655518 + r[3];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + -0.775085;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 867 ##############################
Diversity:       991 / 1000
Average Fitness: 2.8209e+026
Average Size:    89.179

Current Best Program:
// Fitness Information: 0.835659
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[5] = 0.0655518 + r[3];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[2] = -0.230408 + -0.775085;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(cf[0] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 868 ##############################
Diversity:       993 / 1000
Average Fitness: 5.91964e+024
Average Size:    88.992

Current Best Program:
// Fitness Information: 0.833235
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[5] = 0.708862 / r[4];
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = -0.15033 + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//if(-0.230408 < cf[0])
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.271118 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 869 ##############################
Diversity:       993 / 1000
Average Fitness: 1.63174e+008
Average Size:    88.692

Current Best Program:
// Fitness Information: 0.833235
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[5] = 0.708862 / r[4];
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = -0.15033 + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//if(-0.230408 < cf[0])
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.271118 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 870 ##############################
Diversity:       995 / 1000
Average Fitness: 2.09102e+008
Average Size:    88.227

Current Best Program:
// Fitness Information: 0.833235
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[5] = 0.708862 / r[4];
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = -0.15033 + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//if(-0.230408 < cf[0])
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.271118 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 871 ##############################
Diversity:       994 / 1000
Average Fitness: 2.61453e+055
Average Size:    87.001

Current Best Program:
// Fitness Information: 0.833235
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[5] = 0.708862 / r[4];
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = -0.15033 + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//r[5] = cf[0] * 0.569702;
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//if(-0.230408 < cf[0])
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] / cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.271118 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[4] = cf[0] * -0.13739;
	if(r[2] < cf[0])
	r[4] = cf[0] + -0.13739;
	r[2] = r[5] + cf[0];
	if(-0.38562 < -0.0687866)
	r[5] = cf[0] - r[3];
}




############################## 872 ##############################
Diversity:       992 / 1000
Average Fitness: 120121
Average Size:    87.581

Current Best Program:
// Fitness Information: 0.831866
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 873 ##############################
Diversity:       990 / 1000
Average Fitness: 2.61453e+055
Average Size:    87.202

Current Best Program:
// Fitness Information: 0.831866
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 874 ##############################
Diversity:       990 / 1000
Average Fitness: 1.21171e+055
Average Size:    87.532

Current Best Program:
// Fitness Information: 0.831866
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 875 ##############################
Diversity:       990 / 1000
Average Fitness: 4.02108e+051
Average Size:    87.219

Current Best Program:
// Fitness Information: 0.831866
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 876 ##############################
Diversity:       994 / 1000
Average Fitness: 50959.1
Average Size:    86.995

Current Best Program:
// Fitness Information: 0.831866
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 877 ##############################
Diversity:       993 / 1000
Average Fitness: 4.07554e+006
Average Size:    86.43

Current Best Program:
// Fitness Information: 0.831866
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 878 ##############################
Diversity:       993 / 1000
Average Fitness: 7.73581e+025
Average Size:    86.249

Current Best Program:
// Fitness Information: 0.831866
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 879 ##############################
Diversity:       989 / 1000
Average Fitness: 2.82843e+025
Average Size:    86.835

Current Best Program:
// Fitness Information: 0.831866
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//if(r[2] < cf[0])
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = r[2] - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 880 ##############################
Diversity:       988 / 1000
Average Fitness: 1.51424e+054
Average Size:    86.515

Current Best Program:
// Fitness Information: 0.831597
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[5] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[3] + r[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < -0.663147)
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - -0.0931396;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 881 ##############################
Diversity:       991 / 1000
Average Fitness: 9.28319e+025
Average Size:    87.729

Current Best Program:
// Fitness Information: 0.831205
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	r[2] = r[2] + r[3];
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	//r[5] = r[4] / r[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 882 ##############################
Diversity:       992 / 1000
Average Fitness: 8.42637e+027
Average Size:    89.186

Current Best Program:
// Fitness Information: 0.831205
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	r[2] = r[2] + r[3];
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	//r[5] = r[4] / r[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 883 ##############################
Diversity:       993 / 1000
Average Fitness: 6.76653e+026
Average Size:    87.253

Current Best Program:
// Fitness Information: 0.831205
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	r[2] = r[2] + r[3];
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	//r[5] = r[4] / r[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 884 ##############################
Diversity:       991 / 1000
Average Fitness: 9.28319e+025
Average Size:    86.69

Current Best Program:
// Fitness Information: 0.831205
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	r[2] = r[2] + r[3];
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	//r[5] = r[4] / r[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 885 ##############################
Diversity:       984 / 1000
Average Fitness: 1.85752e+026
Average Size:    88.063

Current Best Program:
// Fitness Information: 0.831205
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	r[2] = r[2] + r[3];
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	//r[5] = r[4] / r[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 886 ##############################
Diversity:       994 / 1000
Average Fitness: 2.76292e+026
Average Size:    89.517

Current Best Program:
// Fitness Information: 0.831205
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	r[2] = r[2] + r[3];
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	//r[5] = r[4] / r[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 887 ##############################
Diversity:       994 / 1000
Average Fitness: 1.40586e+022
Average Size:    89.056

Current Best Program:
// Fitness Information: 0.831205
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	r[2] = r[2] + r[3];
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	//r[5] = r[4] / r[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 888 ##############################
Diversity:       992 / 1000
Average Fitness: 3.51404e+027
Average Size:    89.477

Current Best Program:
// Fitness Information: 0.831205
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	r[2] = r[2] + r[3];
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	//r[5] = r[4] / r[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 889 ##############################
Diversity:       989 / 1000
Average Fitness: 5.75667e+025
Average Size:    89.36

Current Best Program:
// Fitness Information: 0.831205
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	r[2] = r[2] + r[3];
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	//r[5] = r[4] / r[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 890 ##############################
Diversity:       990 / 1000
Average Fitness: 3.21267e+025
Average Size:    90.934

Current Best Program:
// Fitness Information: 0.831205
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//if(r[0] < cf[0])
	//if(r[2] < -0.132507)
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//if(0.76886 < r[5])
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//r[1] = cf[0] * cf[0];
	//r[5] = r[1] - 0.532898;
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[1] = r[0] / cf[0];
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	r[2] = r[2] + r[3];
	//r[4] = 0.99231 + r[3];
	if(0.635925 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	//r[5] = r[4] / r[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[3];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 891 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    91.783

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 892 ##############################
Diversity:       984 / 1000
Average Fitness: 4.28055e+023
Average Size:    92.215

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 893 ##############################
Diversity:       987 / 1000
Average Fitness: 2.61453e+055
Average Size:    91.823

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 894 ##############################
Diversity:       992 / 1000
Average Fitness: 3.99754e+023
Average Size:    92.464

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 895 ##############################
Diversity:       989 / 1000
Average Fitness: 6.92828e+024
Average Size:    92.105

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 896 ##############################
Diversity:       991 / 1000
Average Fitness: 8.94057e+023
Average Size:    92.252

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 897 ##############################
Diversity:       990 / 1000
Average Fitness: 2.80345e+055
Average Size:    92.751

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 898 ##############################
Diversity:       993 / 1000
Average Fitness: 5.98676e+023
Average Size:    93.54

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 899 ##############################
Diversity:       990 / 1000
Average Fitness: 1.40075e+026
Average Size:    93.478

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 900 ##############################
Diversity:       987 / 1000
Average Fitness: 1.28053e+055
Average Size:    91.879

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 901 ##############################
Diversity:       992 / 1000
Average Fitness: 1.9644e+023
Average Size:    92.262

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 902 ##############################
Diversity:       992 / 1000
Average Fitness: 2.89213e+023
Average Size:    91.971

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 903 ##############################
Diversity:       989 / 1000
Average Fitness: 2.61453e+055
Average Size:    91.872

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 904 ##############################
Diversity:       989 / 1000
Average Fitness: 2.61453e+055
Average Size:    91.484

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 905 ##############################
Diversity:       988 / 1000
Average Fitness: 5.32728e+025
Average Size:    91.19

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 906 ##############################
Diversity:       991 / 1000
Average Fitness: 6.38844e+025
Average Size:    91.28

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 907 ##############################
Diversity:       989 / 1000
Average Fitness: 28808.5
Average Size:    91.169

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 908 ##############################
Diversity:       989 / 1000
Average Fitness: 2.61453e+055
Average Size:    90.392

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 909 ##############################
Diversity:       989 / 1000
Average Fitness: 8.64145e+026
Average Size:    90.733

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 910 ##############################
Diversity:       993 / 1000
Average Fitness: 2.61678e+054
Average Size:    90.335

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 911 ##############################
Diversity:       989 / 1000
Average Fitness: 41992.1
Average Size:    89.818

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 912 ##############################
Diversity:       989 / 1000
Average Fitness: 7.28448e+010
Average Size:    92.552

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 913 ##############################
Diversity:       992 / 1000
Average Fitness: 1.11085e+027
Average Size:    90.635

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 914 ##############################
Diversity:       991 / 1000
Average Fitness: 9.62037e+025
Average Size:    90.378

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 915 ##############################
Diversity:       990 / 1000
Average Fitness: 5.22905e+055
Average Size:    90.665

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 916 ##############################
Diversity:       991 / 1000
Average Fitness: 2.83052e+025
Average Size:    90.818

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 917 ##############################
Diversity:       988 / 1000
Average Fitness: 1.88544e+023
Average Size:    92.164

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 918 ##############################
Diversity:       992 / 1000
Average Fitness: 1.41873e+027
Average Size:    92.582

Current Best Program:
// Fitness Information: 0.829891
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = r[4] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = -0.55426 - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(r[5] < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 919 ##############################
Diversity:       986 / 1000
Average Fitness: 4.29667e+027
Average Size:    90.363

Current Best Program:
// Fitness Information: 0.829722
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 920 ##############################
Diversity:       990 / 1000
Average Fitness: 6.78109e+025
Average Size:    91.36

Current Best Program:
// Fitness Information: 0.829722
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 921 ##############################
Diversity:       992 / 1000
Average Fitness: 5.64996e+024
Average Size:    93.276

Current Best Program:
// Fitness Information: 0.829722
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 922 ##############################
Diversity:       991 / 1000
Average Fitness: 2.61453e+055
Average Size:    92.978

Current Best Program:
// Fitness Information: 0.829722
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 923 ##############################
Diversity:       992 / 1000
Average Fitness: 49503.8
Average Size:    92.763

Current Best Program:
// Fitness Information: 0.829722
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 924 ##############################
Diversity:       990 / 1000
Average Fitness: 3.00817e+024
Average Size:    92.019

Current Best Program:
// Fitness Information: 0.829722
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 925 ##############################
Diversity:       989 / 1000
Average Fitness: 1.72036e+025
Average Size:    92.657

Current Best Program:
// Fitness Information: 0.829722
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 926 ##############################
Diversity:       987 / 1000
Average Fitness: 5.45393e+025
Average Size:    92.483

Current Best Program:
// Fitness Information: 0.829722
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 927 ##############################
Diversity:       993 / 1000
Average Fitness: 1.44891e+052
Average Size:    91.943

Current Best Program:
// Fitness Information: 0.829722
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 928 ##############################
Diversity:       991 / 1000
Average Fitness: 5.2165e+024
Average Size:    92.414

Current Best Program:
// Fitness Information: 0.829722
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 929 ##############################
Diversity:       993 / 1000
Average Fitness: 2.61453e+055
Average Size:    91.997

Current Best Program:
// Fitness Information: 0.829722
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 930 ##############################
Diversity:       989 / 1000
Average Fitness: 6.76754e+025
Average Size:    92.732

Current Best Program:
// Fitness Information: 0.829722
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 931 ##############################
Diversity:       996 / 1000
Average Fitness: 1.08489e+027
Average Size:    92.007

Current Best Program:
// Fitness Information: 0.829722
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = r[2] - 0.820618;
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - -0.324463;
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[3] = r[2] + cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	//if(r[1] < 0.0737305)
	//r[4] = 0.99231 + r[3];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] - 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 932 ##############################
Diversity:       993 / 1000
Average Fitness: 9.14337e+025
Average Size:    91.608

Current Best Program:
// Fitness Information: 0.821541
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = cf[0] * cf[0];
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - r[2];
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = 0.104431 / cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = r[2] + cf[0];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] / 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 933 ##############################
Diversity:       996 / 1000
Average Fitness: 6.19349e+024
Average Size:    91.85

Current Best Program:
// Fitness Information: 0.821541
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = cf[0] * cf[0];
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - r[2];
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = 0.104431 / cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = r[2] + cf[0];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] / 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 934 ##############################
Diversity:       991 / 1000
Average Fitness: 1.65786e+025
Average Size:    91.661

Current Best Program:
// Fitness Information: 0.821541
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = cf[0] * cf[0];
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - r[2];
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = 0.104431 / cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = r[2] + cf[0];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] / 0.159119;
	r[5] = cf[0] - r[3];
}




############################## 935 ##############################
Diversity:       993 / 1000
Average Fitness: 6.77389e+023
Average Size:    92.68

Current Best Program:
// Fitness Information: 0.821541
template <class T>
void LGP::Program::Execute(std::vector<T>& r, const std::vector<T>& cf) {
	//r[2] = -0.279724 * r[5];
	//r[4] = r[2] - 0.929871;
	//r[5] = 0.626831 * 0.569702;
	//r[0] = cf[0] + r[0];
	//r[2] = r[5] + cf[0];
	//r[4] = cf[0] - 0.404724;
	//if(r[3] < cf[0])
	//if(r[2] < cf[0])
	//r[4] = cf[0] + -0.13739;
	//r[4] = cf[0] - r[1];
	//if(r[2] < r[4])
	//r[2] = cf[0] * r[5];
	//r[5] = cf[0] * cf[0];
	//r[4] = cf[0] * cf[0];
	//if(cf[0] < 0.569702)
	//r[0] = cf[0] - cf[0];
	//if(r[2] < r[3])
	//r[4] = cf[0] + r[0];
	//r[0] = cf[0] - r[2];
	//r[4] = 0.72168 + -0.13739;
	r[4] = cf[0] - r[1];
	//r[0] = r[4] * -0.781494;
	//if(0.808044 < r[1])
	//r[1] = cf[0] / cf[0];
	//r[5] = cf[0] - cf[0];
	//if(r[1] < 0.0737305)
	//r[1] = 0.0165405 - 0.929871;
	//r[0] = r[2] - 0.587219;
	//r[2] = cf[0] + r[5];
	//if(-0.947083 < r[0])
	//if(cf[0] < -0.363953)
	//r[2] = r[5] + cf[0];
	//r[5] = -0.68512 - -0.930176;
	//r[5] = 0.104431 / cf[0];
	//r[2] = 0.99231 - r[2];
	r[3] = -0.151367 / -0.640259;
	//r[2] = cf[0] * r[4];
	//r[2] = r[0] * 0.358704;
	//if(r[3] < cf[0])
	//r[2] = cf[0] * -0.812317;
	r[5] = cf[0] * 0.569702;
	r[4] = r[4] * r[5];
	//r[2] = -0.680969 * cf[0];
	//r[2] = r[2] - r[3];
	//r[0] = -0.52533 * -0.0922852;
	//r[1] = r[3] - 0.59613;
	r[0] = 0.203735 * r[3];
	r[2] = cf[0] * r[5];
	r[3] = -0.151367 / -0.640259;
	r[1] = r[2] - 0.934692;
	if(r[1] < 0.0737305)
	r[1] = r[1] / 0.270203;
	if(0.585144 < r[1])
	r[5] = cf[0] / r[1];
	//r[2] = r[5] + cf[0];
	//r[2] = r[0] - -0.803223;
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.978455;
	if(r[1] < 0.0737305)
	r[0] = r[2] + cf[0];
	if(0.656006 < r[5])
	if(0.808044 < r[1])
	r[2] = r[5] + cf[0];
	//if(cf[0] < r[1])
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < -0.844421)
	//r[4] = cf[0] + r[0];
	if(cf[0] < r[0])
	if(-0.430725 < r[1])
	r[5] = cf[0] * 0.550171;
	r[4] = r[2] - 0.820618;
	//r[2] = cf[0] / cf[0];
	r[2] = cf[0] * r[5];
	if(r[2] < r[4])
	r[1] = r[2] - 0.726074;
	if(r[1] < 0.0737305)
	r[0] = 0.99231 - r[2];
	if(r[3] < r[1])
	r[0] = -0.255493 * r[1];
	r[2] = r[4] + cf[0];
	//r[4] = cf[0] - 0.159119;
	r[5] = cf[0] - r[5];
	if(-0.38562 < -0.0687866)
	r[2] = r[5] + cf[0];
	//r[4] = cf[0] + -0.13739;
	//if(r[2] < cf[0])
	//r[4] = cf[0] * -0.13739;
	r[4] = r[5] / 0.159119;
	r[5] = cf[0] - r[3];
}




